{"version":3,"sources":["utils/constant.js","utils/CommonUtils.js","utils/KeyCodeUtils.js","utils/LanguageUtils.js","components/CustomToast.js","store/actions/actionTypes.js","axios.js","services/userService.js","containers/System/Admin/UserRedux.js","containers/System/Admin/TableManageUser.js","containers/HomePage/Section/OutStandingDoctor.js","containers/HomePage/Patient/Doctor/AllDoctor.js","store/actions/appActions.js","store/actions/userActions.js","store/actions/adminActions.js","store/reducers/appReducer.js","store/reducers/userReducer.js","store/reducers/adminReducer.js","store/reducers/rootReducer.js","redux.js","hoc/authentication.js","routes/Home.js","containers/Auth/Login.js","utils/emitter.js","containers/System/ModalUser.js","containers/System/UserManage.js","components/Navigator.js","containers/Header/menuApp.js","containers/Header/Header.js","containers/System/Admin/ManageDoctor.js","containers/System/Specialty/ManageSpecialty.js","containers/System/Clinic/ManageClinic.js","routes/System.js","containers/HomePage/Section/Specialty.js","containers/HomePage/Section/MedicalFacility.js","containers/HomePage/Section/HandBook.js","containers/HomePage/Section/About.js","containers/HomePage/HomeFooter.js","containers/HomePage/HomePage.js","containers/HomePage/Patient/Doctor/DoctorInfoBooking.js","components/Input/DatePicker.js","containers/HomePage/Patient/Doctor/Modal/BookingModal.js","containers/HomePage/Patient/Doctor/DoctorSchedule.js","containers/HomePage/Patient/Doctor/DoctorExtraInfo.js","containers/HomePage/Patient/Doctor/ProfileDoctor.js","containers/System/Doctor/ManageSchedule.js","containers/System/Doctor/RemedyModal.js","containers/System/Doctor/ManagePatient.js","routes/Doctor.js","containers/HomePage/Patient/verifyEmail.js","containers/HomePage/Patient/Specialty/DetailSpecialty.js","containers/HomePage/Patient/Clinic/DetailClinic.js","containers/HomePage/Patient/Clinic/AllClinic.js","containers/HomePage/Patient/Specialty/AllSpecialty.js","containers/App.js","serviceWorker.js","hoc/IntlProviderWrapper.js","index.js","containers/HomePage/HomeHeader.js","components/CustomScrollbars.js"],"names":["path","HOME","HOMEPAGE","LOGIN","LOG_OUT","SYSTEM","DOCTOR","PROFILE_DOCTOR","DETAIL_SPECIALTY","DETAIL_CLINIC","VERIFY_EMAIL_BOOKING","ALL_DOCTOR","ALL_SPECIALTY","ALL_CLINIC","LANGUAGES","VI","EN","CRUD_ACTIONS","CREATE","READ","EDIT","DELETE","USER_ROLE","ADMIN","PATIENT","CommonUtils","file","Promise","res","rej","reader","FileReader","readAsDataURL","onload","result","onerror","error","KeyCodeUtils","e","UP","DOWN","TAB","ENTER","E","ESCAPE","flattenMessages","nestedMessages","prefix","Object","keys","reduce","messages","key","value","prefixedKey","assign","messages_vi","messages_en","LanguageUtils","lang","Component","actionTypes","freeze","APP_START_UP_COMPLETE","SET_CONTENT_OF_CONFIRM_MODAL","CHANGE_LANGUAGE","ADD_USER_SUCCESS","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","PROCESS_LOGOUT","FETCH_GENDER_START","FETCH_GENDER_SUCCESS","FETCH_GENDER_FAILED","FETCH_POSITION_SUCCESS","FETCH_POSITION_FAILED","FETCH_ROLE_SUCCESS","FETCH_ROLE_FAILED","CREATE_USER_SUCCESS","CREATE_USER_FAILED","EDIT_USER_SUCCESS","EDIT_USER_FAILED","DELETE_USER_SUCCESS","DELETE_USER_FAILED","FETCH_ALL_USER_SUCCESS","FETCH_ALL_USER_FAILED","FETCH_TOP_DOCTORS_SUCCESS","FETCH_TOP_DOCTORS_FAILED","FETCH_ALL_DOCTORS_SUCCESS","FETCH_ALL_DOCTORS_FAILED","SAVE_DETAIL_DOCTOR_SUCCESS","SAVE_DETAIL_DOCTOR_FAILED","GET_DETAIL_DOCTOR_BY_ID_SUCCESS","GET_DETAIL_DOCTOR_BY_ID_FAILED","FETCH_ALL_CODE_SCHEDULE_TIME_SUCCESS","FETCH_ALL_CODE_SCHEDULE_TIME_FAILED","FETCH_REQUIRED_DOCTOR_INFO_START","FETCH_REQUIRED_DOCTOR_INFO_SUCCESS","FETCH_REQUIRED_DOCTOR_INFO_FAILED","instance","axios","create","baseURL","process","handleLoginApi","email","password","post","getAllUsers","id","get","createNewUserService","data","deleteUserService","delete","editUserService","getAllCodeService","inputType","getTopDoctorHomeService","limit","getAllDoctorsService","saveDetailDoctorService","getDetailDoctorByIdService","saveBulkScheduleDoctor","getScheduleDoctorByDate","doctorId","date","getExtraInfoDoctorByIdService","getProfileDoctorById","postPatientBookAppointment","postVerifyBookAppointment","createNewSpecialty","getAllSpecialty","getDetailSpecialtyById","location","createNewClinic","getAllClinic","getDetailClinicById","getAllPatientForDoctor","postSendRemedy","UserRedux","props","handleOnchangeImage","a","target","files","getBase64","base64","objectUrl","URL","createObjectURL","setState","previewImgURL","avatar","openPreviewImage","state","isOpen","handleSaveUser","checkValidateInput","action","createNewUser","firstName","lastName","address","gender","roleId","role","phoneNumber","positionId","position","editAUserRedux","userEditId","isValid","arrCheck","i","length","alert","onChangeInput","copyState","handleEditUserFromParent","user","console","log","imageBase64","image","Buffer","from","toString","genderArr","positionArr","roleArr","this","getGenderStart","getPositionStart","getRoleStart","prevProps","prevState","snapshot","genderRedux","arrGenders","keyMap","roleRedux","arrRoles","positionRedux","arrPositions","listUsers","genders","roles","positions","currentLanguage","language","isGetGenders","isLoadingGender","className","type","onChange","disabled","map","valueVi","valueEn","item","hidden","htmlFor","style","backgroundImage","onClick","mainSrc","onCloseRequest","connect","app","admin","users","dispatch","actions","fetchUserRedux","TableManageUser","MarkdownIt","handleDeleteUser","deleteAUserRedux","handleEditUser","usersRedux","arrUsers","OutStandingDoctor","handleViewDetailDoctor","doctor","history","push","arrDoctors","topDoctorsRedux","loadTopDoctors","to","settings","nameVi","positionData","nameEn","Doctor_Info","Specialty","name","withRouter","isLoggedIn","topDoctors","AllDoctor","isShowBanner","allDoctors","changeLanguageApp","userLoginSuccess","userInfo","processLogout","fetchGenderStart","getState","errCode","fetchGenderSuccess","fetchGenderFailed","fetchPositionStart","fetchPositionSuccess","fetchPositionFailed","fetchRoleStart","fetchRoleSuccess","fetchRoleFailed","toast","success","saveUserSuccess","fetchAllUsersStart","saveUserFailed","fetchAllUsersSuccess","fetchAllUsersFailed","deleteAUser","userId","deleteUserSuccess","deleteUserFailed","editAUser","editUserSuccess","editUserFailed","fetchTopDoctor","dataDoctors","fetchAllDoctors","dataDr","saveDetailDoctor","fetchAllScheduleTime","dataTime","getAllRequiredDoctorInfo","resPrice","resPayment","resProvince","resSpecialty","resClinic","fetchRequiredDoctorInfoSuccess","fetchRequiredDoctorInfoFailed","initialState","started","systemMenuPath","contentOfConfirmModal","messageId","handleFunc","dataFunc","appReducer","userReducer","detailDoctor","allScheduleTime","allRequiredDoctorInfo","adminReducer","dataDrCurrent","persistCommonConfig","storage","stateReconciler","autoMergeLevel2","userPersistConfig","whitelist","appPersisConfig","createBrowserHistory","basename","reduxStateSyncConfig","rootReducer","combineReducers","router","connectRouter","persistReducer","middleware","routerMiddleware","thunkMiddleware","createStateSyncMiddleware","composeEnhancers","compose","reduxStore","createStore","applyMiddleware","persistor","persistStore","locationHelper","locationHelperBuilder","userIsAuthenticated","connectedRouterRedirect","authenticatedSelector","wrapperDisplayName","redirectPath","userIsNotAuthenticated","ownProps","getRedirectQueryParam","allowRedirectBack","Home","linkToRedirect","Login","handleOnchangeUsername","username","handleOnchangePassword","handleLogin","errMessage","message","userLoginSuccessRedux","response","handleKeyDown","keyCode","handleShowHidePassword","isShowPassword","placeholder","onKeyDown","color","navigate","_emitter","EventEmitter","setMaxListeners","emitter","ModalUser","toggle","toggleUser","handleOnChangeInput","arrInput","handleAddNewUser","editArr","currentIdEdit","editUser","listenToEmitter","on","Modal","size","ModalHeader","ModalBody","isCreate","ModalFooter","Button","UserManage","getAllUserFromReact","userData","emit","arrUser","MenuGroup","children","Menu","active","link","hasSubMenu","onLinkClick","data-toggle","aria-expanded","SubMenu","getItemClass","pathname","MenuGroupWithRouter","MenuWithRouter","SubMenuWithRouter","Navigator","expandedMenu","groupIndex","menuIndex","isMenuHasSubMenuActive","subMenus","currentPath","checkActiveMenu","menus","outerLoop","group","j","menu","isSubMenuOpen","subMenu","subMenuIndex","closeOtherExpand","withRouterInnerRef","WrappedComponent","InnerComponentWithRef","forwardRef","rest","ref","React","ComponentWithRef","withRef","adminMenu","doctorMenu","Header","handleChangeLanguage","changeLanguageAppRedux","menuApp","_","isEmpty","mdParser","ManageDoctor","buildDataInputSelect","inputData","object","labelVi","labelEn","label","handleGetData","getDetailDoctorById","currentId","Markdown","contentMarkdown","contentHTML","description","handleEditorChange","html","text","handleSaveContentMarkdown","hasOldData","selectedOption","selectedPrice","selectedPayment","selectedProvince","selectedSpecialty","selectedClinic","nameClinic","addressClinic","note","clinicId","specialtyId","handleChangeSelect","listPayment","listPrice","listProvince","listSpecialty","listClinic","markdown","provinceId","priceId","paymentId","doctor_info","find","handleOnChangeSelectDoctorInfo","stateName","stateCopy","handleOnChangeText","listDoctor","dataSelect","dataSelectPrice","dataSelectPayment","dataSelectProvince","dataSelectSpecialty","dataSelectClinic","options","rows","height","renderHTML","render","ManageSpecialty","handleOnchangeInput","handleEditChange","descriptionHTML","descriptionMarkdown","handleSaveNewSpecialty","ManageClinic","handleSaveNewClinic","isShowDetail","extraInfo","System","component","handleViewDetailSpecialty","dataSpecialty","MedicalFacility","handleViewDetailClinic","dataClinics","HandBook","About","width","src","title","frameBorder","allow","allowFullScreen","HomeFooter","href","marginLeft","HomePage","dots","infinite","speed","slidesToShow","slidesToScroll","HomeHeader","DoctorInfoBooking","getInfoDoctor","renderTimeBooking","time","moment","unix","format","locale","dataProfile","isShowDescription","isShowPrice","isShowLinkDetail","priceTypeData","displayType","thousandSeparator","suffix","DatePicker","flatpickrNode","nodeRef","element","flatpickr","node","addEventListener","handleBlur","handlerKeyDown","event","which","preventDefault","valueMoment","toDate","onOpen","blur","checkDateValue","str","max","charAt","num","parseInt","isNaN","autoFormatOnChange","seperator","input","RegExp","test","substr","values","split","v","replace","join","onInputChange","DISPLAY_FORMAT","DATE_FORMAT_AUTO_FILL","converted","SEPERATOR","onInputBlur","removeEventListener","close","minDate","onClose","otherProps","dateFormat","allowInput","disableMobile","BookingModal","buildDataGender","valueInput","handleOnchangeDatePicker","birthday","selectedGender","handleConfirmBooking","isShowLoading","handleCheckAvailableDay","Date","getTime","timeString","buildTimeBooking","buildDoctorName","doctorName","fullName","reason","timeType","closeBookingClose","rangeTime","isSelected","dataDoctor","getGenders","isOpenModal","spinner","centered","DoctorSchedule","getArrDays","allDays","ddMM","today","add","capitalizeFirstLetter","startOf","valueOf","handleOnChangeSelect","doctorIdFromParent","allAvailableTime","handleClickScheduleTime","dataScheduleTimeModal","x","splice","handleCloseModal","string","toUpperCase","slice","timeDisplay","DoctorExtraInfo","handleShowHideDetail","status","paymentTypeData","ProfileDoctor","currentDoctorId","match","params","dangerouslySetInnerHTML","__html","ManageSchedule","selectDoctor","handleOnChangeDatePicker","currentDate","handleClickBtnTime","handleSaveSchedule","formatDate","selectedTime","filter","schedule","arrSchedule","lisDoctors","yesterday","setDate","getDate","RemedyModal","handleOnchangeEmail","imgBase64","handleSendRemedy","sendRemedy","dataModal","closeRemedyModal","aria-label","aria-hidden","ManagePatient","getDataPatient","dataPatient","handleBtnConfirm","patientId","patientData","patientName","dataChild","timeTypeDataPatient","genderData","Doctor","verifyEmail","statusVerify","search","urlParams","URLSearchParams","token","DetailSpecialty","arrDoctorId","arr","doctorSpecialty","dataDetailSpecialty","dataProvince","unshift","createdAt","DetailClinic","doctorClinic","AllClinic","AllSpecialty","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","App","getAnalytics","handlePersistorState","bootstrapped","onBeforeLift","resolve","then","catch","CustomScrollbars","exact","VerifyEmail","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","Boolean","window","hostname","getFlattenedMessages","IntlProviderWrapper","defaultLocale","ReactDOM","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","returnHome","createRef","getScrollLeft","current","getScrollTop","scrollToBottom","targetScrollTop","getScrollHeight","scrollTo","targetTop","quickScroll","scrollbars","originalTop","iteration","scroll","scrollTop","setTimeout","renderTrackHorizontal","renderTrackVertical","renderThumbHorizontal","renderThumbVertical","renderNone","disableVerticalScroll","disableHorizontalScroll","autoHide","autoHideTimeout","hideTracksWhenNotNeeded"],"mappings":"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","file":"static/js/main.cda5d4b0.chunk.js","sourcesContent":["export const path = {\r\n    HOME: '/',\r\n    HOMEPAGE: '/home',\r\n    LOGIN: '/login',\r\n    LOG_OUT: '/logout',\r\n    SYSTEM: '/system',\r\n    DOCTOR: '/doctor',\r\n    PROFILE_DOCTOR: '/profile-doctor/:id',\r\n    DETAIL_SPECIALTY: '/detail-specialty/:id',\r\n    DETAIL_CLINIC: '/detail-clinic/:id',\r\n    VERIFY_EMAIL_BOOKING: '/verify-booking',\r\n    ALL_DOCTOR: '/all-doctor',\r\n    ALL_SPECIALTY: '/all-specialty',\r\n    ALL_CLINIC: '/all-clinic',\r\n};\r\n\r\nexport const LANGUAGES = {\r\n    VI: 'vi',\r\n    EN: 'en',\r\n};\r\n\r\nexport const CRUD_ACTIONS = {\r\n    CREATE: 'CREATE',\r\n    READ: 'READ',\r\n    EDIT: 'EDIT',\r\n    DELETE: 'DELETE',\r\n};\r\n\r\nexport const dateFormat = {\r\n    SEND_TO_SERVER: 'DD/MM/YYYY',\r\n};\r\n\r\nexport const YesNoObj = {\r\n    YES: 'Y',\r\n    NO: 'N',\r\n};\r\n\r\nexport const USER_ROLE = {\r\n    ADMIN: 'R1',\r\n    DOCTOR: 'R2',\r\n    PATIENT: 'R3',\r\n};\r\n","class CommonUtils {\r\n    static getBase64(file) {\r\n        return new Promise((res, rej) => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => res(reader.result);\r\n            reader.onerror = (error) => rej(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport default CommonUtils;\r\n","class KeyCodeUtils {\r\n\r\n    static UP = 38;\r\n\r\n    static DOWN = 40;\r\n\r\n    static TAB = 9;\r\n\r\n    static ENTER = 13;\r\n\r\n    static E = 69;\r\n\r\n    static ESCAPE = 27; \r\n\r\n    static isNavigation(e) {\r\n        return (e >= 33 && e <= 40) || e === 9 || e === 8 || e === 46 || e === 14 || e === 13;\r\n    }\r\n\r\n    static isNumeric(e) {\r\n        return (e >= 48 && e <= 57) || (e >= 96 && e <= 105);\r\n    }\r\n    static isAlphabetic(e) {\r\n        return (e >= 65 && e <= 90);\r\n    }\r\n    static isDecimal(e) {\r\n        return e === 190 || e === 188 || e === 108 || e === 110;\r\n    }\r\n\r\n    static isDash(e) {\r\n        return e === 109 || e === 189;\r\n    }\r\n}\r\n\r\nexport default KeyCodeUtils;","import messages_vi from '../translations/vi.json';\r\nimport messages_en from '../translations/en.json';\r\n\r\nconst flattenMessages = ((nestedMessages, prefix = '') => {\r\n    if (nestedMessages == null) {\r\n        return {}\r\n    }\r\n    return Object.keys(nestedMessages).reduce((messages, key) => {\r\n        const value = nestedMessages[key];\r\n        const prefixedKey = prefix ? `${prefix}.${key}` : key;\r\n\r\n        if (typeof value === 'string') {\r\n            Object.assign(messages, {[prefixedKey]: value})\r\n        } else {\r\n            Object.assign(messages, flattenMessages(value, prefixedKey))\r\n        }\r\n\r\n        return messages\r\n    }, {})\r\n});\r\n\r\nconst messages = {\r\n    'vi': flattenMessages(messages_vi),\r\n    'en': flattenMessages(messages_en),\r\n};\r\n\r\nexport default class LanguageUtils {\r\n    static getMessageByKey(key, lang) {\r\n        return messages[lang][key]\r\n    }\r\n\r\n    static getFlattenedMessages() {\r\n        return messages;\r\n    }\r\n}","import React, { Component, Fragment } from 'react';\r\nimport { FormattedMessage, FormattedTime } from 'react-intl';\r\n\r\nimport CustomScrollBar from '../components/CustomScrollbars';\r\n\r\nimport './CustomToast.scss';\r\n\r\nclass CustomToast extends Component {\r\n\r\n    render() {\r\n        const { titleId, message, messageId, time } = this.props;\r\n        return (\r\n            <Fragment>\r\n                <div className=\"custom-toast\">\r\n                    <div className=\"toast-title\">\r\n                        {time && (\r\n                            <span className=\"date\">\r\n                                <FormattedTime hour='numeric' minute='numeric' second='numeric' hour12={true} value={time} />\r\n                            </span>\r\n                        )}\r\n                        <i className=\"fa fa-fw fa-exclamation-triangle\" />\r\n                        <FormattedMessage id={titleId} />\r\n                    </div>\r\n                    {\r\n                        (message && typeof message === 'object') ?\r\n                            <CustomScrollBar autoHeight={true} autoHeightMin={50} autoHeightMax={100}>\r\n                                {\r\n                                    message.map((msg, index) => {\r\n                                        return (\r\n                                            <Fragment key={index}>\r\n                                                <div className=\"toast-content\">{msg}</div>\r\n                                            </Fragment>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </CustomScrollBar> :\r\n                            <div className=\"toast-content\">\r\n                                {message ? message : (messageId ? (<FormattedMessage id={messageId} />) : null)}\r\n                            </div>\r\n                    }\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport class CustomToastCloseButton extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <button type=\"button\" className=\"toast-close\" onClick={this.props.closeToast}>\r\n                <i className=\"fa fa-fw fa-times-circle\" />\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CustomToast;","const actionTypes = Object.freeze({\r\n    //app\r\n    APP_START_UP_COMPLETE: 'APP_START_UP_COMPLETE',\r\n    SET_CONTENT_OF_CONFIRM_MODAL: 'SET_CONTENT_OF_CONFIRM_MODAL',\r\n    CHANGE_LANGUAGE: 'CHANGE_LANGUAGE',\r\n\r\n    //user\r\n    ADD_USER_SUCCESS: 'ADD_USER_SUCCESS',\r\n    USER_LOGIN_SUCCESS: 'USER_LOGIN_SUCCESS',\r\n    USER_LOGIN_FAIL: 'USER_LOGIN_FAIL',\r\n    PROCESS_LOGOUT: 'PROCESS_LOGOUT',\r\n\r\n    // admin\r\n\r\n    FETCH_GENDER_START: 'FETCH_GENDER_START',\r\n    FETCH_GENDER_SUCCESS: 'FETCH_GENDER_SUCCESS',\r\n    FETCH_GENDER_FAILED: 'FETCH_GENDER_FAILED',\r\n\r\n    FETCH_POSITION_SUCCESS: 'FETCH_POSITION_SUCCESS',\r\n    FETCH_POSITION_FAILED: 'FETCH_POSITION_FAILED',\r\n\r\n    FETCH_ROLE_SUCCESS: 'FETCH_ROLE_SUCCESS',\r\n    FETCH_ROLE_FAILED: 'FETCH_ROLE_FAILED',\r\n\r\n    CREATE_USER_SUCCESS: 'CREATE_USER_SUCCESS',\r\n    CREATE_USER_FAILED: 'CREATE_USER_FAILED',\r\n\r\n    EDIT_USER_SUCCESS: 'EDIT_USER_SUCCESS',\r\n    EDIT_USER_FAILED: 'EDIT_USER_FAILED',\r\n\r\n    DELETE_USER_SUCCESS: 'DELETE_USER_SUCCESS',\r\n    DELETE_USER_FAILED: 'DELETE_USER_FAILED',\r\n\r\n    FETCH_ALL_USER_SUCCESS: 'FETCH_ALL_USER_SUCCESS',\r\n    FETCH_ALL_USER_FAILED: 'FETCH_ALL_USER_FAILED',\r\n\r\n    FETCH_TOP_DOCTORS_SUCCESS: 'FETCH_TOP_DOCTORS_SUCCESS',\r\n    FETCH_TOP_DOCTORS_FAILED: 'FETCH_TOP_DOCTORS_FAILED',\r\n\r\n    FETCH_ALL_DOCTORS_SUCCESS: 'FETCH_ALL_DOCTORS_SUCCESS',\r\n    FETCH_ALL_DOCTORS_FAILED: 'FETCH_ALL_DOCTORS_FAILED',\r\n\r\n    SAVE_DETAIL_DOCTOR_SUCCESS: 'SAVE_DETAIL_DOCTOR_SUCCESS',\r\n    SAVE_DETAIL_DOCTOR_FAILED: 'SAVE_DETAIL_DOCTOR_FAILED',\r\n\r\n    GET_DETAIL_DOCTOR_BY_ID_SUCCESS: 'GET_DETAIL_DOCTOR_BY_ID_SUCCESS',\r\n    GET_DETAIL_DOCTOR_BY_ID_FAILED: 'GET_DETAIL_DOCTOR_BY_ID_FAILED',\r\n\r\n    FETCH_ALL_CODE_SCHEDULE_TIME_SUCCESS: 'FETCH_ALL_CODE_SCHEDULE_TIME_SUCCESS',\r\n    FETCH_ALL_CODE_SCHEDULE_TIME_FAILED: 'FETCH_ALL_CODE_SCHEDULE_TIME_FAILED',\r\n\r\n    FETCH_REQUIRED_DOCTOR_INFO_START: 'FETCH_REQUIRED_DOCTOR_INFO_START',\r\n    FETCH_REQUIRED_DOCTOR_INFO_SUCCESS: 'FETCH_REQUIRED_DOCTOR_INFO_SUCCESS',\r\n    FETCH_REQUIRED_DOCTOR_INFO_FAILED: 'FETCH_REQUIRED_DOCTOR_INFO_FAILED',\r\n});\r\n\r\nexport default actionTypes;\r\n","import axios from 'axios';\r\nimport _ from 'lodash';\r\n\r\nconst instance = axios.create({\r\n    baseURL: process.env.REACT_APP_BACKEND_URL,\r\n    // withCredentials: true,\r\n});\r\n\r\n// instance.interceptors.response.use((response) => {\r\n//     const { data } = response;\r\n//     return response.data;\r\n// });\r\n\r\nexport default instance;\r\n","import axios from '../axios';\r\n\r\nconst handleLoginApi = (email, password) => {\r\n    return axios.post('/api/login', { email, password });\r\n};\r\n\r\nconst getAllUsers = (id) => {\r\n    return axios.get(`/api/get-all-users?id=${id}`);\r\n};\r\n\r\nconst createNewUserService = (data) => {\r\n    return axios.post('/api/create-new-user', data);\r\n};\r\n\r\nconst deleteUserService = (id) => {\r\n    return axios.delete('/api/delete-user', { data: { id } });\r\n};\r\nconst editUserService = (data) => {\r\n    return axios.post('/api/edit-user', data);\r\n};\r\n\r\nconst getAllCodeService = (inputType) => {\r\n    return axios.get(`/api/all-code?type=${inputType}`);\r\n};\r\n\r\nconst getTopDoctorHomeService = (limit) => {\r\n    return axios.get(`/api/top-doctor-home?limit=${limit}`);\r\n};\r\n\r\nconst getAllDoctorsService = () => {\r\n    return axios.get(`/api/get-all-doctors`);\r\n};\r\nconst saveDetailDoctorService = (data) => {\r\n    return axios.post(`/api/save-info-doctors`, data);\r\n};\r\nconst getDetailDoctorByIdService = (id) => {\r\n    return axios.get(`/api/get-detail-doctor-by-id?id=${id}`);\r\n};\r\n\r\nconst saveBulkScheduleDoctor = (data) => {\r\n    return axios.post(`/api/bulk-create-schedule`, data);\r\n};\r\n\r\nconst getScheduleDoctorByDate = (doctorId, date) => {\r\n    return axios.get(`/api/get-schedule-doctor-by-date?doctorId=${doctorId}&date=${date}`);\r\n};\r\n\r\nconst getExtraInfoDoctorByIdService = (doctorId) => {\r\n    return axios.get(`/api/get-extra-info-doctor-by-id?doctorId=${doctorId}`);\r\n};\r\n\r\nconst getProfileDoctorById = (doctorId) => {\r\n    return axios.get(`/api/get-profile-doctor-by-id?doctorId=${doctorId}`);\r\n};\r\n\r\nconst postPatientBookAppointment = (data) => {\r\n    return axios.post(`/api/patient-book-appointment`, data);\r\n};\r\nconst postVerifyBookAppointment = (data) => {\r\n    return axios.post(`/api/verify-book-appointment`, data);\r\n};\r\nconst createNewSpecialty = (data) => {\r\n    return axios.post(`/api/create-new-specialty`, data);\r\n};\r\nconst getAllSpecialty = () => {\r\n    return axios.get(`/api/get-specialty`);\r\n};\r\nconst getDetailSpecialtyById = (data) => {\r\n    return axios.get(`/api/get-detail-specialty-by-id?id=${data.id}&location=${data.location}`);\r\n};\r\nconst createNewClinic = (data) => {\r\n    return axios.post(`/api/create-new-clinic`, data);\r\n};\r\n\r\nconst getAllClinic = () => {\r\n    return axios.get(`/api/get-clinic`);\r\n};\r\nconst getDetailClinicById = (data) => {\r\n    return axios.get(`/api/get-detail-clinic-by-id?id=${data.id}&location=${data.location}`);\r\n};\r\n\r\nconst getAllPatientForDoctor = (data) => {\r\n    return axios.get(\r\n        `/api/get-list-patient-for-doctor?doctorId=${data.doctorId}&date=${data.date}`,\r\n    );\r\n};\r\nconst postSendRemedy = (data) => {\r\n    return axios.post(`/api/send-remedy`, data);\r\n};\r\nexport {\r\n    handleLoginApi,\r\n    getAllUsers,\r\n    createNewUserService,\r\n    deleteUserService,\r\n    editUserService,\r\n    getAllCodeService,\r\n    getTopDoctorHomeService,\r\n    getAllDoctorsService,\r\n    saveDetailDoctorService,\r\n    getDetailDoctorByIdService,\r\n    saveBulkScheduleDoctor,\r\n    getScheduleDoctorByDate,\r\n    getExtraInfoDoctorByIdService,\r\n    getProfileDoctorById,\r\n    postPatientBookAppointment,\r\n    postVerifyBookAppointment,\r\n    createNewSpecialty,\r\n    getAllSpecialty,\r\n    getDetailSpecialtyById,\r\n    createNewClinic,\r\n    getAllClinic,\r\n    getDetailClinicById,\r\n    getAllPatientForDoctor,\r\n    postSendRemedy,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { LANGUAGES, CRUD_ACTIONS, CommonUtils } from '../../../utils';\r\nimport * as actions from '../../../store/actions';\r\nimport './UserRedux.scss';\r\nimport Lightbox from 'react-image-lightbox';\r\nimport 'react-image-lightbox/style.css';\r\nimport TableManageUser from './TableManageUser';\r\n\r\nclass UserRedux extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            genderArr: [],\r\n            positionArr: [],\r\n            roleArr: [],\r\n            previewImgURL: '',\r\n            isOpen: false,\r\n\r\n            email: '',\r\n            password: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            address: '',\r\n            gender: '',\r\n            role: '',\r\n            phoneNumber: '',\r\n            position: '',\r\n            avatar: '',\r\n\r\n            action: '',\r\n            userEditId: '',\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.props.getGenderStart();\r\n        this.props.getPositionStart();\r\n        this.props.getRoleStart();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.genderRedux !== this.props.genderRedux) {\r\n            let arrGenders = this.props.genderRedux;\r\n            this.setState({\r\n                genderArr: arrGenders,\r\n                gender: arrGenders && arrGenders.length > 0 ? arrGenders[0].keyMap : '',\r\n            });\r\n        }\r\n        if (prevProps.roleRedux !== this.props.roleRedux) {\r\n            let arrRoles = this.props.roleRedux;\r\n\r\n            this.setState({\r\n                roleArr: arrRoles,\r\n                role: arrRoles && arrRoles.length > 0 ? arrRoles[0].keyMap : '',\r\n            });\r\n        }\r\n        if (prevProps.positionRedux !== this.props.positionRedux) {\r\n            let arrPositions = this.props.positionRedux;\r\n\r\n            this.setState({\r\n                positionArr: arrPositions,\r\n                position: arrPositions && arrPositions.length > 0 ? arrPositions[0].keyMap : '',\r\n            });\r\n        }\r\n\r\n        if (prevProps.listUsers !== this.props.listUsers) {\r\n            let arrGenders = this.props.genderRedux;\r\n            let arrRoles = this.props.roleRedux;\r\n            let arrPositions = this.props.positionRedux;\r\n            this.setState({\r\n                email: '',\r\n                password: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                address: '',\r\n                gender: arrGenders && arrGenders.length > 0 ? arrGenders[0].keyMap : '',\r\n                role: arrRoles && arrRoles.length > 0 ? arrRoles[0].keyMap : '',\r\n                position: arrPositions && arrPositions.length > 0 ? arrPositions[0].keyMap : '',\r\n                phoneNumber: '',\r\n                avatar: '',\r\n                action: CRUD_ACTIONS.CREATE,\r\n                previewImgURL: '',\r\n            });\r\n        }\r\n    }\r\n\r\n    handleOnchangeImage = async (e) => {\r\n        let data = e.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            let objectUrl = URL.createObjectURL(file);\r\n            this.setState({\r\n                previewImgURL: objectUrl,\r\n                avatar: base64,\r\n            });\r\n        }\r\n    };\r\n\r\n    openPreviewImage = () => {\r\n        if (!this.state.previewImgURL) return;\r\n\r\n        this.setState({\r\n            isOpen: true,\r\n        });\r\n    };\r\n\r\n    handleSaveUser = () => {\r\n        let isValid = this.checkValidateInput();\r\n        if (isValid === false) return;\r\n        let { action } = this.state;\r\n        if (action === CRUD_ACTIONS.CREATE) {\r\n            this.props.createNewUser({\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n                firstName: this.state.firstName,\r\n                lastName: this.state.lastName,\r\n                address: this.state.address,\r\n                gender: this.state.gender,\r\n                roleId: this.state.role,\r\n                phoneNumber: this.state.phoneNumber,\r\n                positionId: this.state.position,\r\n                avatar: this.state.avatar,\r\n            });\r\n        }\r\n        if (action === CRUD_ACTIONS.EDIT) {\r\n            this.props.editAUserRedux({\r\n                id: this.state.userEditId,\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n                firstName: this.state.firstName,\r\n                lastName: this.state.lastName,\r\n                address: this.state.address,\r\n                gender: this.state.gender,\r\n                roleId: this.state.role,\r\n                phoneNumber: this.state.phoneNumber,\r\n                positionId: this.state.position,\r\n                avatar: this.state.avatar,\r\n            });\r\n        }\r\n    };\r\n\r\n    checkValidateInput = () => {\r\n        let isValid = true;\r\n        let arrCheck = ['email', 'password', 'firstName', 'lastName', 'phoneNumber', 'address'];\r\n        for (let i = 0; i < arrCheck.length; i++) {\r\n            if (!this.state[arrCheck[i]]) {\r\n                isValid = false;\r\n                alert('this input is required');\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    };\r\n\r\n    onChangeInput = (e, id) => {\r\n        let copyState = { ...this.state };\r\n        copyState[id] = e.target.value;\r\n        this.setState({\r\n            ...copyState,\r\n        });\r\n    };\r\n\r\n    handleEditUserFromParent = (user) => {\r\n        console.log(user);\r\n        let imageBase64 = '';\r\n        if (user.image) {\r\n            imageBase64 = Buffer.from(user.image, 'base64').toString('binary');\r\n        }\r\n        this.setState({\r\n            email: user.email,\r\n            password: 'HARDCODE',\r\n            firstName: user.firstName,\r\n            lastName: user.lastName,\r\n            address: user.address,\r\n            gender: user.gender,\r\n            role: user.roleId,\r\n            phoneNumber: user.phoneNumber,\r\n            position: user.positionId,\r\n            avatar: '',\r\n            action: CRUD_ACTIONS.EDIT,\r\n            userEditId: user.id,\r\n            previewImgURL: imageBase64,\r\n        });\r\n    };\r\n    render() {\r\n        let genders = this.state.genderArr;\r\n        let roles = this.state.roleArr;\r\n        let positions = this.state.positionArr;\r\n        let currentLanguage = this.props.language;\r\n        let isGetGenders = this.props.isLoadingGender;\r\n\r\n        let {\r\n            email,\r\n            password,\r\n            firstName,\r\n            lastName,\r\n            phoneNumber,\r\n            address,\r\n            gender,\r\n            position,\r\n            role,\r\n            avatar,\r\n        } = this.state;\r\n\r\n        return (\r\n            <div className=\"user-redux-container\">\r\n                <div className=\"title\">User Redux</div>\r\n                <div className=\"user-redux-body\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">Them moi</div>\r\n                            <div className=\"col-12\">\r\n                                {isGetGenders === true ? 'Loading genders' : ''}\r\n                            </div>\r\n                            <div className=\"col-3\">\r\n                                <label> Email</label>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    type=\"email\"\r\n                                    value={email}\r\n                                    onChange={(e) => {\r\n                                        this.onChangeInput(e, 'email');\r\n                                    }}\r\n                                    disabled={\r\n                                        this.state.action === CRUD_ACTIONS.EDIT ? true : false\r\n                                    }\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-3\">\r\n                                <label> Password</label>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    type=\"password\"\r\n                                    value={password}\r\n                                    onChange={(e) => {\r\n                                        this.onChangeInput(e, 'password');\r\n                                    }}\r\n                                    disabled={\r\n                                        this.state.action === CRUD_ACTIONS.EDIT ? true : false\r\n                                    }\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-3\">\r\n                                <label> first name</label>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    value={firstName}\r\n                                    onChange={(e) => {\r\n                                        this.onChangeInput(e, 'firstName');\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-3\">\r\n                                <label> last name</label>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    value={lastName}\r\n                                    onChange={(e) => {\r\n                                        this.onChangeInput(e, 'lastName');\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-3\">\r\n                                <label> phone number</label>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    value={phoneNumber}\r\n                                    onChange={(e) => {\r\n                                        this.onChangeInput(e, 'phoneNumber');\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-9\">\r\n                                <label> Address</label>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    value={address}\r\n                                    onChange={(e) => {\r\n                                        this.onChangeInput(e, 'address');\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-3\">\r\n                                <label> gender</label>\r\n                                <select\r\n                                    className=\"form-control\"\r\n                                    onChange={(e) => {\r\n                                        this.onChangeInput(e, 'gender');\r\n                                    }}\r\n                                    value={gender}\r\n                                >\r\n                                    {genders &&\r\n                                        genders.length > 0 &&\r\n                                        genders.map((gender, i) => {\r\n                                            return (\r\n                                                <option key={i} value={gender.keyMap}>\r\n                                                    {currentLanguage === LANGUAGES.VI\r\n                                                        ? gender.valueVi\r\n                                                        : gender.valueEn}\r\n                                                </option>\r\n                                            );\r\n                                        })}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"col-3\">\r\n                                <label> Role</label>\r\n                                <select\r\n                                    className=\"form-control\"\r\n                                    onChange={(e) => {\r\n                                        this.onChangeInput(e, 'role');\r\n                                    }}\r\n                                    value={role}\r\n                                >\r\n                                    {roles &&\r\n                                        roles.length > 0 &&\r\n                                        roles.map((item, i) => {\r\n                                            return (\r\n                                                <option key={i} value={item.keyMap}>\r\n                                                    {currentLanguage === LANGUAGES.VI\r\n                                                        ? item.valueVi\r\n                                                        : item.valueEn}\r\n                                                </option>\r\n                                            );\r\n                                        })}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"col-3\">\r\n                                <label> Position</label>\r\n                                <select\r\n                                    className=\"form-control\"\r\n                                    onChange={(e) => {\r\n                                        this.onChangeInput(e, 'position');\r\n                                    }}\r\n                                    value={position}\r\n                                >\r\n                                    {positions &&\r\n                                        positions.length > 0 &&\r\n                                        positions.map((item, i) => {\r\n                                            return (\r\n                                                <option key={i} value={item.keyMap}>\r\n                                                    {currentLanguage === LANGUAGES.VI\r\n                                                        ? item.valueVi\r\n                                                        : item.valueEn}\r\n                                                </option>\r\n                                            );\r\n                                        })}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"col-3\">\r\n                                <label> Image</label>\r\n                                <div className=\"preview-img-container\">\r\n                                    <input\r\n                                        id=\"previewImg\"\r\n                                        type=\"file\"\r\n                                        hidden\r\n                                        onChange={(e) => this.handleOnchangeImage(e)}\r\n                                    />\r\n\r\n                                    <label className=\"label-upload\" htmlFor=\"previewImg\">\r\n                                        Tai anh <i className=\"fas fa-upload\" />\r\n                                    </label>\r\n                                    <div\r\n                                        className=\"preview-image\"\r\n                                        style={{\r\n                                            backgroundImage: `url(${this.state.previewImgURL})`,\r\n                                        }}\r\n                                        onClick={() => {\r\n                                            this.openPreviewImage();\r\n                                        }}\r\n                                    ></div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-12 my-3\">\r\n                                <button\r\n                                    className={\r\n                                        this.state.action === CRUD_ACTIONS.EDIT\r\n                                            ? 'btn btn-warning'\r\n                                            : 'btn btn-primary'\r\n                                    }\r\n                                    onClick={() => this.handleSaveUser()}\r\n                                >\r\n                                    {this.state.action === CRUD_ACTIONS.EDIT ? (\r\n                                        <FormattedMessage id=\"manage-user.edit\" />\r\n                                    ) : (\r\n                                        <FormattedMessage id=\"manage-user.save\" />\r\n                                    )}\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"col-12 mb-5\">\r\n                                <TableManageUser\r\n                                    handleEditUserFromParent={this.handleEditUserFromParent}\r\n                                    action={this.state.action}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {this.state.isOpen === true && (\r\n                    <Lightbox\r\n                        mainSrc={this.state.previewImgURL}\r\n                        onCloseRequest={() => this.setState({ isOpen: false })}\r\n                    />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        language: state.app.language,\r\n        genderRedux: state.admin.genders,\r\n        roleRedux: state.admin.roles,\r\n        positionRedux: state.admin.positions,\r\n        isLoadingGender: state.admin.isLoadingGender,\r\n        listUsers: state.admin.users,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getGenderStart: () => dispatch(actions.fetchGenderStart()),\r\n        getPositionStart: () => dispatch(actions.fetchPositionStart()),\r\n        getRoleStart: () => dispatch(actions.fetchRoleStart()),\r\n        createNewUser: (data) => dispatch(actions.createNewUser(data)),\r\n        editAUserRedux: (data) => dispatch(actions.editAUser(data)),\r\n        fetchUserRedux: () => dispatch(actions.fetchAllUsersStart()),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserRedux);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './TableManageUser.scss';\r\nimport * as actions from '../../../store/actions';\r\n\r\nimport MarkdownIt from 'markdown-it';\r\n// import style manually\r\nimport 'react-markdown-editor-lite/lib/index.css';\r\n\r\n// Initialize a markdown parser\r\nconst mdParser = new MarkdownIt(/* Markdown-it options */);\r\n\r\n// Finish!\r\n\r\nclass TableManageUser extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            usersRedux: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchUserRedux();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.listUsers !== this.props.listUsers) {\r\n            this.setState({\r\n                usersRedux: this.props.listUsers,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleDeleteUser = (user) => {\r\n        this.props.deleteAUserRedux(user.id);\r\n    };\r\n\r\n    handleEditUser = (user) => {\r\n        this.props.handleEditUserFromParent(user);\r\n    };\r\n\r\n    render() {\r\n        let arrUsers = this.state.usersRedux;\r\n        return (\r\n            <>\r\n                <table id=\"TableManageUser\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Email</th>\r\n                            <th>First name</th>\r\n                            <th>Last name</th>\r\n                            <th>Address</th>\r\n                            <th>Action</th>\r\n                        </tr>\r\n                        {arrUsers &&\r\n                            arrUsers.length > 0 &&\r\n                            arrUsers.map((user, i) => {\r\n                                return (\r\n                                    <tr key={i}>\r\n                                        <td>{user.email}</td>\r\n                                        <td>{user.firstName}</td>\r\n                                        <td>{user.lastName}</td>\r\n                                        <td>{user.address}</td>\r\n                                        <td>\r\n                                            <button\r\n                                                className=\"btn-edit\"\r\n                                                onClick={() => this.handleEditUser(user)}\r\n                                            >\r\n                                                <i className=\"fas fa-pencil-alt\" />\r\n                                            </button>\r\n                                            <button\r\n                                                className=\"btn-delete\"\r\n                                                onClick={() => this.handleDeleteUser(user)}\r\n                                            >\r\n                                                <i className=\"fas fa-trash\" />\r\n                                            </button>\r\n                                        </td>\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        listUsers: state.admin.users,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchUserRedux: () => dispatch(actions.fetchAllUsersStart()),\r\n        deleteAUserRedux: (id) => dispatch(actions.deleteAUser(id)),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableManageUser);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport Slider from 'react-slick';\r\nimport * as actions from '../../../store/actions';\r\nimport { LANGUAGES } from '../../../utils';\r\nimport { withRouter } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass OutStandingDoctor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arrDoctors: [],\r\n        };\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.topDoctorsRedux !== this.props.topDoctorsRedux) {\r\n            this.setState({\r\n                arrDoctors: this.props.topDoctorsRedux,\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.loadTopDoctors();\r\n    }\r\n\r\n    handleViewDetailDoctor = (doctor) => {\r\n        if (this.props.history) {\r\n            this.props.history.push(`/profile-doctor/${doctor.id}`);\r\n        }\r\n    };\r\n    render() {\r\n        let arrDoctors = this.state.arrDoctors;\r\n        console.log(arrDoctors);\r\n        let { language } = this.props;\r\n        return (\r\n            <div className=\"section-share section-outstanding-doctor\">\r\n                <div className=\"section-container\">\r\n                    <div className=\"section-header\">\r\n                        <span className=\"title-section\">\r\n                            <FormattedMessage id=\"homepage.outstanding-doctor\" />\r\n                        </span>\r\n                        <Link className=\"btn-section\" to=\"/all-doctor\">\r\n                            <FormattedMessage id=\"homepage.more-info\" />\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"section-body\">\r\n                        <Slider {...this.props.settings}>\r\n                            {arrDoctors &&\r\n                                arrDoctors.length > 0 &&\r\n                                arrDoctors.map((item, i) => {\r\n                                    let imageBase64 = '';\r\n                                    if (item.image) {\r\n                                        imageBase64 = Buffer.from(item.image, 'base64').toString(\r\n                                            'binary',\r\n                                        );\r\n                                    }\r\n                                    let nameVi = `${item.positionData.valueVi} ${item.lastName} ${item.firstName}`;\r\n                                    let nameEn = `${item.positionData.valueEn} ${item.firstName} ${item.lastName}`;\r\n                                    return (\r\n                                        <div\r\n                                            className=\"section-customize\"\r\n                                            key={i}\r\n                                            onClick={() => this.handleViewDetailDoctor(item)}\r\n                                        >\r\n                                            <div className=\"customize-border\">\r\n                                                <div className=\"outer-bg\">\r\n                                                    <div\r\n                                                        className=\"bg-image section-outstanding-doctor\"\r\n                                                        style={{\r\n                                                            backgroundImage: `url(${imageBase64})`,\r\n                                                        }}\r\n                                                    />\r\n                                                    <div className=\"position text-center\">\r\n                                                        <div className=\"name-doctor\">\r\n                                                            {language === LANGUAGES.VI\r\n                                                                ? nameVi\r\n                                                                : nameEn}\r\n                                                        </div>\r\n                                                        <div className=\"specialty\">\r\n                                                            {item.Doctor_Info.Specialty.name}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                        </Slider>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language,\r\n        topDoctorsRedux: state.admin.topDoctors,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        loadTopDoctors: () => dispatch(actions.fetchTopDoctor()),\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(OutStandingDoctor));\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport HomeHeader from '../../HomeHeader';\r\nimport { LANGUAGES } from '../../../../utils';\r\nimport * as actions from '../../../../store/actions';\r\nimport './AllDoctor.scss';\r\n\r\nclass AllDoctor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arrDoctors: [],\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.props.loadTopDoctors();\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.topDoctorsRedux !== this.props.topDoctorsRedux) {\r\n            this.setState({\r\n                arrDoctors: this.props.topDoctorsRedux,\r\n            });\r\n        }\r\n    }\r\n    handleViewDetailDoctor = (doctor) => {\r\n        if (this.props.history) {\r\n            this.props.history.push(`/profile-doctor/${doctor.id}`);\r\n        }\r\n    };\r\n    render() {\r\n        let { arrDoctors } = this.state;\r\n        let { language } = this.props;\r\n        return (\r\n            <>\r\n                <HomeHeader isShowBanner={false} />\r\n                <div className=\"all-doctor-container\">\r\n                    {arrDoctors &&\r\n                        arrDoctors.length > 0 &&\r\n                        arrDoctors.map((item, i) => {\r\n                            let imageBase64 = '';\r\n                            if (item.image) {\r\n                                imageBase64 = Buffer.from(item.image, 'base64').toString('binary');\r\n                            }\r\n                            let nameVi = `${item.positionData.valueVi} ${item.lastName} ${item.firstName}`;\r\n                            let nameEn = `${item.positionData.valueEn} ${item.firstName} ${item.lastName}`;\r\n                            return (\r\n                                <div\r\n                                    className=\"section-customize\"\r\n                                    key={i}\r\n                                    onClick={() => this.handleViewDetailDoctor(item)}\r\n                                >\r\n                                    <div className=\"customize-border\">\r\n                                        <div className=\"outer-bg\">\r\n                                            <div\r\n                                                className=\"bg-image section-outstanding-doctor\"\r\n                                                style={{\r\n                                                    backgroundImage: `url(${imageBase64})`,\r\n                                                }}\r\n                                            />\r\n                                            <div className=\"position text-center\">\r\n                                                <div>\r\n                                                    {language === LANGUAGES.VI ? nameVi : nameEn}\r\n                                                </div>\r\n                                                <div>{item.Doctor_Info.Specialty.name}</div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        language: state.app.language,\r\n        topDoctorsRedux: state.admin.allDoctors,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        loadTopDoctors: () => dispatch(actions.fetchAllDoctors()),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AllDoctor);\r\n","import actionTypes from './actionTypes';\r\n\r\nexport const appStartUpComplete = () => ({\r\n    type: actionTypes.APP_START_UP_COMPLETE,\r\n});\r\n\r\nexport const setContentOfConfirmModal = (contentOfConfirmModal) => ({\r\n    type: actionTypes.SET_CONTENT_OF_CONFIRM_MODAL,\r\n    contentOfConfirmModal,\r\n});\r\n\r\nexport const changeLanguageApp = (language) => ({\r\n    type: actionTypes.CHANGE_LANGUAGE,\r\n    language,\r\n});\r\n","import actionTypes from './actionTypes';\r\n\r\nexport const addUserSuccess = () => ({\r\n    type: actionTypes.ADD_USER_SUCCESS,\r\n});\r\n\r\nexport const userLoginSuccess = (userInfo) => ({\r\n    type: actionTypes.USER_LOGIN_SUCCESS,\r\n    userInfo,\r\n});\r\n\r\nexport const userLoginFail = () => ({\r\n    type: actionTypes.USER_LOGIN_FAIL,\r\n});\r\n\r\nexport const processLogout = () => ({\r\n    type: actionTypes.PROCESS_LOGOUT,\r\n});\r\n","import actionTypes from './actionTypes';\r\nimport {\r\n    getAllCodeService,\r\n    createNewUserService,\r\n    getAllUsers,\r\n    deleteUserService,\r\n    editUserService,\r\n    getTopDoctorHomeService,\r\n    getAllDoctorsService,\r\n    saveDetailDoctorService,\r\n    getDetailDoctorByIdService,\r\n    getAllSpecialty,\r\n    getAllClinic,\r\n} from '../../services/userService';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport const fetchGenderStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.FETCH_GENDER_START });\r\n            let res = await getAllCodeService('GENDER');\r\n            if (res.data && res.data.errCode === 0) {\r\n                dispatch(fetchGenderSuccess(res.data.data));\r\n            } else {\r\n                dispatch(fetchGenderFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(fetchGenderFailed());\r\n            console.log(e);\r\n        }\r\n    };\r\n};\r\nexport const fetchPositionStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            // dispatch({ type: actionTypes.FETCH_POSITION_START });\r\n            let res = await getAllCodeService('POSITION');\r\n            if (res.data && res.data.errCode === 0) {\r\n                dispatch(fetchPositionSuccess(res.data.data));\r\n            } else {\r\n                dispatch(fetchPositionFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(fetchPositionFailed());\r\n            console.log(e);\r\n        }\r\n    };\r\n};\r\nexport const fetchRoleStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            // dispatch({ type: actionTypes.FETCH_ROLE_START });\r\n            let res = await getAllCodeService('ROLE');\r\n            if (res.data && res.data.errCode === 0) {\r\n                dispatch(fetchRoleSuccess(res.data.data));\r\n            } else {\r\n                dispatch(fetchRoleFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(fetchRoleFailed());\r\n            console.log(e);\r\n        }\r\n    };\r\n};\r\n\r\nexport const fetchGenderSuccess = (data) => ({\r\n    type: actionTypes.FETCH_GENDER_SUCCESS,\r\n    data,\r\n});\r\nexport const fetchGenderFailed = () => ({\r\n    type: actionTypes.FETCH_GENDER_FAILED,\r\n});\r\n\r\nexport const fetchPositionSuccess = (data) => ({\r\n    type: actionTypes.FETCH_POSITION_SUCCESS,\r\n    data,\r\n});\r\nexport const fetchPositionFailed = () => ({\r\n    type: actionTypes.FETCH_POSITION_FAILED,\r\n});\r\n\r\nexport const fetchRoleSuccess = (data) => ({\r\n    type: actionTypes.FETCH_ROLE_SUCCESS,\r\n    data,\r\n});\r\nexport const fetchRoleFailed = () => ({\r\n    type: actionTypes.FETCH_ROLE_FAILED,\r\n});\r\n\r\nexport const createNewUser = (data) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await createNewUserService(data);\r\n            if (res.data && res.data.errCode === 0) {\r\n                toast.success('Create a new user succeed!');\r\n                dispatch(saveUserSuccess(data));\r\n                dispatch(fetchAllUsersStart());\r\n            } else {\r\n                toast.error('Create a new user failed!');\r\n                dispatch(saveUserFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(saveUserFailed());\r\n            console.log(e);\r\n        }\r\n    };\r\n};\r\n\r\nexport const saveUserSuccess = (data) => ({\r\n    type: actionTypes.CREATE_USER_SUCCESS,\r\n    data,\r\n});\r\nexport const saveUserFailed = () => ({\r\n    type: actionTypes.CREATE_USER_FAILED,\r\n});\r\n\r\nexport const fetchAllUsersStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await getAllUsers('ALL');\r\n            if (res.data && res.data.errCode === 0) {\r\n                dispatch(fetchAllUsersSuccess(res.data.user));\r\n            } else {\r\n                toast.error('Fetch all user error!');\r\n                dispatch(fetchAllUsersFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(fetchAllUsersFailed());\r\n            console.log(e);\r\n        }\r\n    };\r\n};\r\nexport const fetchAllUsersSuccess = (data) => ({\r\n    type: actionTypes.FETCH_ALL_USER_SUCCESS,\r\n    data,\r\n});\r\nexport const fetchAllUsersFailed = () => ({\r\n    type: actionTypes.FETCH_ALL_USER_FAILED,\r\n});\r\n\r\nexport const deleteAUser = (userId) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await deleteUserService(userId);\r\n            if (res.data && res.data.errCode === 0) {\r\n                toast.success('Delete the user succeed!');\r\n                dispatch(deleteUserSuccess());\r\n                dispatch(fetchAllUsersStart());\r\n            } else {\r\n                toast.error('Delete the user error!');\r\n                dispatch(deleteUserFailed());\r\n            }\r\n        } catch (e) {\r\n            toast.error('Delete the user error!');\r\n            dispatch(deleteUserFailed());\r\n            console.log(e);\r\n        }\r\n    };\r\n};\r\n\r\nexport const deleteUserSuccess = (data) => ({\r\n    type: actionTypes.DELETE_USER_SUCCESS,\r\n    data,\r\n});\r\nexport const deleteUserFailed = () => ({\r\n    type: actionTypes.DELETE_USER_FAILED,\r\n});\r\n\r\nexport const editAUser = (userId) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await editUserService(userId);\r\n            if (res.data && res.data.errCode === 0) {\r\n                toast.success('Update the user succeed!');\r\n                dispatch(editUserSuccess());\r\n                dispatch(fetchAllUsersStart());\r\n            } else {\r\n                toast.error('Update the user error!');\r\n                dispatch(editUserFailed());\r\n            }\r\n        } catch (e) {\r\n            toast.error('Update the user error!');\r\n            dispatch(editUserFailed());\r\n            console.log(e);\r\n        }\r\n    };\r\n};\r\n\r\nexport const editUserSuccess = (data) => ({\r\n    type: actionTypes.EDIT_USER_SUCCESS,\r\n    data,\r\n});\r\nexport const editUserFailed = () => ({\r\n    type: actionTypes.EDIT_USER_FAILED,\r\n});\r\n\r\nexport const fetchTopDoctor = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await getTopDoctorHomeService('');\r\n            if (res && res.data.errCode === 0) {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_TOP_DOCTORS_SUCCESS,\r\n                    dataDoctors: res.data.data,\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_TOP_DOCTORS_FAILED,\r\n                });\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n            dispatch({\r\n                type: actionTypes.FETCH_TOP_DOCTORS_FAILED,\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\nexport const fetchAllDoctors = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await getAllDoctorsService();\r\n            if (res && res.data.errCode === 0) {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_ALL_DOCTORS_SUCCESS,\r\n                    dataDr: res.data.data,\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_ALL_DOCTORS_FAILED,\r\n                });\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n            dispatch({\r\n                type: actionTypes.FETCH_ALL_DOCTORS_FAILED,\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\nexport const saveDetailDoctor = (data) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await saveDetailDoctorService(data);\r\n            if (res && res.data.errCode === 0) {\r\n                toast.success('Save succeed!');\r\n                dispatch({\r\n                    type: actionTypes.SAVE_DETAIL_DOCTOR_SUCCESS,\r\n                });\r\n            } else {\r\n                toast.error('Save error');\r\n                dispatch({\r\n                    type: actionTypes.SAVE_DETAIL_DOCTOR_FAILED,\r\n                });\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n            toast.error('Save error');\r\n            dispatch({\r\n                type: actionTypes.SAVE_DETAIL_DOCTOR_FAILED,\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\nexport const getDetailDoctorById = (Id) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await getDetailDoctorByIdService(Id);\r\n            if (res && res.data.errCode === 0) {\r\n                dispatch({\r\n                    type: actionTypes.GET_DETAIL_DOCTOR_BY_ID_SUCCESS,\r\n                    dataDrCurrent: res.data.data,\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: actionTypes.GET_DETAIL_DOCTOR_BY_ID_FAILED,\r\n                });\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n            dispatch({\r\n                type: actionTypes.GET_DETAIL_DOCTOR_BY_ID_FAILED,\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\nexport const fetchAllScheduleTime = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await getAllCodeService('TIME');\r\n            if (res && res.data.errCode === 0) {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_ALL_CODE_SCHEDULE_TIME_SUCCESS,\r\n                    dataTime: res.data.data,\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_ALL_CODE_SCHEDULE_TIME_FAILED,\r\n                });\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n            dispatch({\r\n                type: actionTypes.FETCH_ALL_CODE_SCHEDULE_TIME_FAILED,\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\nexport const getAllRequiredDoctorInfo = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.FETCH_REQUIRED_DOCTOR_INFO_START });\r\n\r\n            let resPrice = await getAllCodeService('PRICE');\r\n            let resPayment = await getAllCodeService('PAYMENT');\r\n            let resProvince = await getAllCodeService('PROVINCE');\r\n            let resSpecialty = await getAllSpecialty();\r\n            let resClinic = await getAllClinic();\r\n            if (\r\n                resPrice &&\r\n                resPrice.data.errCode === 0 &&\r\n                resPayment &&\r\n                resPayment.data.errCode === 0 &&\r\n                resProvince &&\r\n                resProvince.data.errCode === 0 &&\r\n                resSpecialty &&\r\n                resSpecialty.data.errCode === 0 &&\r\n                resClinic &&\r\n                resClinic.data.errCode === 0\r\n            ) {\r\n                let data = {\r\n                    resPrice: resPrice.data.data,\r\n                    resPayment: resPayment.data.data,\r\n                    resProvince: resProvince.data.data,\r\n                    resSpecialty: resSpecialty.data.data,\r\n                    resClinic: resClinic.data.data,\r\n                };\r\n                dispatch(fetchRequiredDoctorInfoSuccess(data));\r\n            } else {\r\n                dispatch(fetchRequiredDoctorInfoFailed());\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n            dispatch(fetchRequiredDoctorInfoFailed());\r\n        }\r\n    };\r\n};\r\n\r\nexport const fetchRequiredDoctorInfoSuccess = (data) => ({\r\n    type: actionTypes.FETCH_REQUIRED_DOCTOR_INFO_SUCCESS,\r\n    data,\r\n});\r\n\r\nexport const fetchRequiredDoctorInfoFailed = () => ({\r\n    type: actionTypes.FETCH_REQUIRED_DOCTOR_INFO_FAILED,\r\n});\r\n","import actionTypes from '../actions/actionTypes';\r\n\r\nconst initContentOfConfirmModal = {\r\n    isOpen: false,\r\n    messageId: '',\r\n    handleFunc: null,\r\n    dataFunc: null,\r\n};\r\n\r\nconst initialState = {\r\n    started: true,\r\n    language: 'vi',\r\n    systemMenuPath: '/system/user-manage',\r\n    contentOfConfirmModal: {\r\n        ...initContentOfConfirmModal,\r\n    },\r\n};\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.APP_START_UP_COMPLETE:\r\n            return {\r\n                ...state,\r\n                started: true,\r\n            };\r\n        case actionTypes.SET_CONTENT_OF_CONFIRM_MODAL:\r\n            return {\r\n                ...state,\r\n                contentOfConfirmModal: {\r\n                    ...state.contentOfConfirmModal,\r\n                    ...action.contentOfConfirmModal,\r\n                },\r\n            };\r\n        case actionTypes.CHANGE_LANGUAGE:\r\n            return {\r\n                ...state,\r\n                language: action.language,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default appReducer;\r\n","import actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    userInfo: null,\r\n};\r\n\r\nconst userReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.USER_LOGIN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: true,\r\n                userInfo: action.userInfo,\r\n            };\r\n        case actionTypes.USER_LOGIN_FAIL:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: false,\r\n                userInfo: null,\r\n            };\r\n        case actionTypes.PROCESS_LOGOUT:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: false,\r\n                userInfo: null,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default userReducer;\r\n","import actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    isLoadingGender: false,\r\n    genders: [],\r\n    roles: [],\r\n    positions: [],\r\n    users: [],\r\n    topDoctors: [],\r\n    allDoctors: [],\r\n    detailDoctor: [],\r\n    allScheduleTime: [],\r\n    allRequiredDoctorInfo: [],\r\n};\r\n\r\nconst adminReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.FETCH_GENDER_START:\r\n            let copyState = { ...state };\r\n            copyState.isLoadingGender = true;\r\n            return {\r\n                ...state,\r\n            };\r\n        case actionTypes.FETCH_GENDER_SUCCESS:\r\n            state.genders = action.data;\r\n            state.isLoadingGender = false;\r\n            return {\r\n                ...state,\r\n            };\r\n        case actionTypes.FETCH_GENDER_FAILED:\r\n            state.isLoadingGender = false;\r\n            state.genders = [];\r\n            return {\r\n                ...state,\r\n            };\r\n        case actionTypes.FETCH_POSITION_SUCCESS:\r\n            state.positions = action.data;\r\n            return {\r\n                ...state,\r\n            };\r\n        case actionTypes.FETCH_POSITION_FAILED:\r\n            state.positions = [];\r\n            return {\r\n                ...state,\r\n            };\r\n        case actionTypes.FETCH_ROLE_SUCCESS:\r\n            state.roles = action.data;\r\n            return {\r\n                ...state,\r\n            };\r\n        case actionTypes.FETCH_ROLE_FAILED:\r\n            state.roles = [];\r\n            return {\r\n                ...state,\r\n            };\r\n        case actionTypes.FETCH_ALL_USER_SUCCESS:\r\n            state.users = action.data;\r\n            return {\r\n                ...state,\r\n            };\r\n        case actionTypes.FETCH_ALL_USER_FAILED:\r\n            state.users = [];\r\n            return {\r\n                ...state,\r\n            };\r\n        case actionTypes.FETCH_TOP_DOCTORS_SUCCESS:\r\n            state.topDoctors = action.dataDoctors;\r\n            return {\r\n                ...state,\r\n            };\r\n        case actionTypes.FETCH_TOP_DOCTORS_FAILED:\r\n            state.topDoctors = [];\r\n            return {\r\n                ...state,\r\n            };\r\n        case actionTypes.FETCH_ALL_DOCTORS_SUCCESS:\r\n            state.allDoctors = action.dataDr;\r\n            return {\r\n                ...state,\r\n            };\r\n        case actionTypes.FETCH_ALL_DOCTORS_FAILED:\r\n            state.allDoctors = [];\r\n            return {\r\n                ...state,\r\n            };\r\n        case actionTypes.GET_DETAIL_DOCTOR_BY_ID_SUCCESS:\r\n            state.detailDoctor = action.dataDrCurrent;\r\n            return {\r\n                ...state,\r\n            };\r\n        case actionTypes.GET_DETAIL_DOCTOR_BY_ID_FAILED:\r\n            state.detailDoctor = [];\r\n            return {\r\n                ...state,\r\n            };\r\n        case actionTypes.FETCH_ALL_CODE_SCHEDULE_TIME_SUCCESS:\r\n            state.allScheduleTime = action.dataTime;\r\n            return {\r\n                ...state,\r\n            };\r\n        case actionTypes.FETCH_ALL_CODE_SCHEDULE_TIME_FAILED:\r\n            state.allScheduleTime = [];\r\n            return {\r\n                ...state,\r\n            };\r\n        case actionTypes.FETCH_REQUIRED_DOCTOR_INFO_SUCCESS:\r\n            state.allRequiredDoctorInfo = action.data;\r\n            return {\r\n                ...state,\r\n            };\r\n        case actionTypes.FETCH_REQUIRED_DOCTOR_INFO_FAILED:\r\n            state.allRequiredDoctorInfo = [];\r\n            return {\r\n                ...state,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default adminReducer;\r\n","import { combineReducers } from 'redux';\r\nimport { connectRouter } from 'connected-react-router';\r\n\r\nimport appReducer from './appReducer';\r\nimport userReducer from './userReducer';\r\nimport adminReducer from './adminReducer';\r\n\r\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { persistReducer } from 'redux-persist';\r\n\r\nconst persistCommonConfig = {\r\n    storage: storage,\r\n    stateReconciler: autoMergeLevel2,\r\n};\r\n\r\nconst userPersistConfig = {\r\n    ...persistCommonConfig,\r\n    key: 'user',\r\n    whitelist: ['isLoggedIn', 'userInfo'],\r\n};\r\nconst appPersisConfig = {\r\n    ...persistCommonConfig,\r\n    key: 'app',\r\n    whitelist: ['language'],\r\n};\r\n\r\nexport default (history) =>\r\n    combineReducers({\r\n        router: connectRouter(history),\r\n        user: persistReducer(userPersistConfig, userReducer),\r\n        app: persistReducer(appPersisConfig, appReducer),\r\n        admin: adminReducer,\r\n    });\r\n","import { logger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { routerMiddleware } from 'connected-react-router';\r\nimport { createBrowserHistory } from 'history';\r\n\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { createStateSyncMiddleware } from 'redux-state-sync';\r\nimport { persistStore } from 'redux-persist';\r\n\r\nimport createRootReducer from './store/reducers/rootReducer';\r\nimport actionTypes from './store/actions/actionTypes';\r\n\r\nconst environment = process.env.NODE_ENV || 'development';\r\nlet isDevelopment = environment === 'development';\r\n\r\n//hide redux logs\r\nisDevelopment = false;\r\n\r\nexport const history = createBrowserHistory({ basename: process.env.REACT_APP_ROUTER_BASE_NAME });\r\n\r\nconst reduxStateSyncConfig = {\r\n    whitelist: [actionTypes.APP_START_UP_COMPLETE, actionTypes.CHANGE_LANGUAGE],\r\n};\r\n\r\nconst rootReducer = createRootReducer(history);\r\nconst middleware = [\r\n    routerMiddleware(history),\r\n    thunkMiddleware,\r\n    createStateSyncMiddleware(reduxStateSyncConfig),\r\n];\r\nif (isDevelopment) middleware.push(logger);\r\n\r\nconst composeEnhancers =\r\n    isDevelopment && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n        ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n        : compose;\r\n\r\nconst reduxStore = createStore(rootReducer, composeEnhancers(applyMiddleware(...middleware)));\r\n\r\nexport const dispatch = reduxStore.dispatch;\r\n\r\nexport const persistor = persistStore(reduxStore);\r\n\r\nexport default reduxStore;\r\n","import locationHelperBuilder from 'redux-auth-wrapper/history4/locationHelper';\r\nimport { connectedRouterRedirect } from 'redux-auth-wrapper/history4/redirect';\r\n\r\nconst locationHelper = locationHelperBuilder({});\r\n\r\nexport const userIsAuthenticated = connectedRouterRedirect({\r\n    authenticatedSelector: (state) => state.user.isLoggedIn,\r\n    wrapperDisplayName: 'UserIsAuthenticated',\r\n    redirectPath: '/login',\r\n});\r\n\r\nexport const userIsNotAuthenticated = connectedRouterRedirect({\r\n    // Want to redirect the user when they are authenticated\r\n    authenticatedSelector: (state) => !state.user.isLoggedIn,\r\n    wrapperDisplayName: 'UserIsNotAuthenticated',\r\n    redirectPath: (state, ownProps) => locationHelper.getRedirectQueryParam(ownProps) || '/',\r\n    allowRedirectBack: false,\r\n});\r\n","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        const { isLoggedIn } = this.props;\r\n        let linkToRedirect = isLoggedIn ? '/system/user-manage' : '/home';\r\n\r\n        return <Redirect to={linkToRedirect} />;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { push } from 'connected-react-router';\r\nimport { handleLoginApi } from '../../services/userService';\r\nimport * as actions from '../../store/actions';\r\nimport './Login.scss';\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            isShowPassword: false,\r\n            errMessage: '',\r\n        };\r\n    }\r\n    handleOnchangeUsername = (e) => {\r\n        this.setState({\r\n            username: e.target.value,\r\n        });\r\n    };\r\n    handleOnchangePassword = (e) => {\r\n        this.setState({\r\n            password: e.target.value,\r\n        });\r\n    };\r\n    handleLogin = async () => {\r\n        this.setState({\r\n            errMessage: '',\r\n        });\r\n        try {\r\n            let data = await handleLoginApi(this.state.username, this.state.password);\r\n            if (data && data.data.errCode !== 0) {\r\n                this.setState({\r\n                    errMessage: data.data.message,\r\n                });\r\n            }\r\n            if (data && data.data.errCode === 0) {\r\n                this.props.userLoginSuccessRedux(data.data.user);\r\n            }\r\n        } catch (e) {\r\n            if (e.response) {\r\n                if (e.response.data) {\r\n                    this.setState({\r\n                        errMessage: e.response.data.message,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    handleKeyDown = (e) => {\r\n        if (e.key === 'Enter' || e.keyCode === 13) {\r\n            this.handleLogin();\r\n        }\r\n    };\r\n    handleShowHidePassword = () => {\r\n        this.setState({\r\n            isShowPassword: !this.state.isShowPassword,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"login-background\">\r\n                <div className=\"login-container\">\r\n                    <div className=\"login-content row\">\r\n                        <div className=\"col-12 login-text\">Login</div>\r\n                        <div className=\"col-12 form-group login-input\">\r\n                            <label>Username:</label>\r\n                            <input\r\n                                onChange={(e) => this.handleOnchangeUsername(e)}\r\n                                value={this.state.username}\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Enter your name\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 form-group login-input\">\r\n                            <label>Password:</label>\r\n                            <div className=\"custom-password\">\r\n                                <input\r\n                                    type={this.state.isShowPassword ? 'text' : 'password'}\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Enter your password\"\r\n                                    onChange={(e) => this.handleOnchangePassword(e)}\r\n                                    onKeyDown={(e) => this.handleKeyDown(e)}\r\n                                />\r\n                                <div\r\n                                    className=\"show-hide-pass\"\r\n                                    onClick={() => this.handleShowHidePassword()}\r\n                                >\r\n                                    {this.state.isShowPassword ? (\r\n                                        <i className=\"far fa-eye-slash\"></i>\r\n                                    ) : (\r\n                                        <i className=\"far fa-eye\"></i>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-12\" style={{ color: 'red' }}>\r\n                            {this.state.errMessage}\r\n                        </div>\r\n                        <div className=\"col-12 \">\r\n                            <button\r\n                                className=\"login-btn\"\r\n                                onClick={() => {\r\n                                    this.handleLogin();\r\n                                }}\r\n                            >\r\n                                Login\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                            <span className=\"forgot-password\">Forgot your password</span>\r\n                        </div>\r\n                        <div className=\"col-12 text-center mt-3\">\r\n                            <span>Or login with:</span>\r\n                        </div>\r\n                        <div className=\"col-12 login-social\">\r\n                            <i className=\"fab fa-google-plus icon-google\"></i>\r\n                            <i className=\"fab fa-facebook icon-facebook\"></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        navigate: (path) => dispatch(push(path)),\r\n        // userLoginFail: () => dispatch(actions.adminLoginFail()),\r\n        userLoginSuccessRedux: (userInfo) => dispatch(actions.userLoginSuccess(userInfo)),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","import EventEmitter from 'events';\r\n\r\nconst _emitter = new EventEmitter();\r\n_emitter.setMaxListeners(0);\r\n\r\nexport const emitter = _emitter;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Modal, ModalBody, ModalFooter, ModalHeader } from 'reactstrap';\r\nimport { emitter } from '../../utils/emitter';\r\n\r\nclass ModalUser extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            address: '',\r\n        };\r\n        this.listenToEmitter();\r\n    }\r\n\r\n    listenToEmitter() {\r\n        emitter.on('EVENT_CLEAR_MODAL_DATA', () => {\r\n            this.setState({\r\n                email: '',\r\n                password: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                address: '',\r\n            });\r\n        });\r\n    }\r\n    componentDidMount() {}\r\n    toggle = () => {\r\n        this.props.toggleUser();\r\n    };\r\n    handleOnChangeInput = (e, id) => {\r\n        let copyState = { ...this.state };\r\n        copyState[id] = e.target.value;\r\n        this.setState({\r\n            ...copyState,\r\n        });\r\n    };\r\n    checkValidateInput = () => {\r\n        let isValid = true;\r\n        let arrInput = ['email', 'password', 'firstName', 'lastName', 'address'];\r\n        for (var i = 0; i < arrInput.length; i++) {\r\n            if (!this.state[arrInput[i]]) {\r\n                isValid = false;\r\n                alert('Missing parameter:' + arrInput[i]);\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    };\r\n    handleAddNewUser = () => {\r\n        let isValid = this.checkValidateInput();\r\n        if (isValid === true) {\r\n            this.props.createNewUser(this.state);\r\n        }\r\n    };\r\n    handleEditUser = () => {\r\n        const editArr = this.state;\r\n        editArr.id = this.props.currentIdEdit;\r\n        this.props.editUser(editArr);\r\n    };\r\n    render() {\r\n        return (\r\n            <Modal\r\n                isOpen={this.props.isOpen}\r\n                toggle={() => this.toggle()}\r\n                className={'abcClassName'}\r\n                size=\"lg\"\r\n            >\r\n                <ModalHeader toggle={() => this.toggle()}></ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            {this.props.isCreate && (\r\n                                <div className=\"form-row\">\r\n                                    <div className=\"form-group col-6\">\r\n                                        <label htmlFor=\"inputEmail4\">Email</label>\r\n                                        <input\r\n                                            type=\"email\"\r\n                                            className=\"form-control\"\r\n                                            name=\"email\"\r\n                                            placeholder=\"Email\"\r\n                                            onChange={(e) => this.handleOnChangeInput(e, 'email')}\r\n                                            value={this.state.email}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-group col-6\">\r\n                                        <label htmlFor=\"inputPassword4\">Password</label>\r\n                                        <input\r\n                                            type=\"password\"\r\n                                            className=\"form-control\"\r\n                                            name=\"password\"\r\n                                            placeholder=\"Password\"\r\n                                            onChange={(e) =>\r\n                                                this.handleOnChangeInput(e, 'password')\r\n                                            }\r\n                                            value={this.state.password}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                            <div className=\"form-row\">\r\n                                <div className=\"form-group col-6\">\r\n                                    <label htmlFor=\"inputEmail4\">First name</label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className=\"form-control\"\r\n                                        name=\"firstName\"\r\n                                        placeholder=\"Email\"\r\n                                        onChange={(e) => this.handleOnChangeInput(e, 'firstName')}\r\n                                        value={this.state.firstName}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"form-group col-6\">\r\n                                    <label htmlFor=\"inputPassword4\">Last name</label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className=\"form-control\"\r\n                                        name=\"lastName\"\r\n                                        placeholder=\"Password\"\r\n                                        onChange={(e) => this.handleOnChangeInput(e, 'lastName')}\r\n                                        value={this.state.lastName}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"inputAddress\">Address</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    name=\"address\"\r\n                                    placeholder=\"1234 Main St\"\r\n                                    onChange={(e) => this.handleOnChangeInput(e, 'address')}\r\n                                    value={this.state.address}\r\n                                />\r\n                            </div>\r\n                            {this.props.isCreate && (\r\n                                <div className=\"form-row\">\r\n                                    <div className=\"form-group col-4\">\r\n                                        <label htmlFor=\"inputCity\">Phone number</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            name=\"phoneNumber\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-group col-md-4\">\r\n                                        <label htmlFor=\"inputState\">Gender</label>\r\n                                        <select name=\"gender\" className=\"form-control\">\r\n                                            <option>Choose...</option>\r\n                                            <option value=\"1\">Male</option>\r\n                                            <option value=\"0\">Female</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className=\"form-group col-md-4\">\r\n                                        <label htmlFor=\"inputState\">Role</label>\r\n                                        <select name=\"role\" className=\"form-control\">\r\n                                            <option>Choose...</option>\r\n                                            <option value=\"R1\">Admin</option>\r\n                                            <option value=\"R2\">Doctor</option>\r\n                                            <option value=\"R3\">Patient</option>\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    {this.props.isCreate ? (\r\n                        <Button color=\"primary\" onClick={() => this.handleAddNewUser()}>\r\n                            Create new\r\n                        </Button>\r\n                    ) : (\r\n                        <Button color=\"primary\" onClick={() => this.handleEditUser()}>\r\n                            Save change\r\n                        </Button>\r\n                    )}\r\n                    <Button color=\"secondary\" onClick={() => this.toggle()}>\r\n                        Cancel\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalUser);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    getAllUsers,\r\n    createNewUserService,\r\n    deleteUserService,\r\n    editUserService,\r\n} from '../../services/userService';\r\nimport './UserManage.scss';\r\nimport ModalUser from './ModalUser';\r\nimport { emitter } from '../../utils/emitter';\r\n\r\nclass UserManage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userData: [],\r\n            isOpen: false,\r\n            isCreate: false,\r\n            currentIdEdit: '',\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.getAllUserFromReact();\r\n    }\r\n\r\n    getAllUserFromReact = async () => {\r\n        let response = await getAllUsers('ALL');\r\n        if (response && response.data.errCode === 0) {\r\n            this.setState({\r\n                userData: response.data.user,\r\n            });\r\n        }\r\n    };\r\n\r\n    handleAddNewUser = () => {\r\n        this.setState({\r\n            isOpen: true,\r\n            isCreate: true,\r\n        });\r\n    };\r\n\r\n    toggleUser = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen,\r\n        });\r\n    };\r\n    createNewUser = async (data) => {\r\n        try {\r\n            let response = await createNewUserService(data);\r\n            if (response && response.data.errCode !== 0) {\r\n                alert(response.data.errMessage);\r\n            } else {\r\n                await this.getAllUserFromReact();\r\n                this.toggleUser();\r\n                emitter.emit('EVENT_CLEAR_MODAL_DATA');\r\n            }\r\n        } catch (e) {}\r\n    };\r\n\r\n    editUser = async (data) => {\r\n        try {\r\n            let res = await editUserService(data);\r\n            if (res && res.data.errCode === 0) {\r\n                await this.getAllUserFromReact();\r\n                this.toggleUser();\r\n                emitter.emit('EVENT_CLEAR_MODAL_DATA');\r\n            } else {\r\n                alert(res.data.errMessage);\r\n            }\r\n        } catch (e) {}\r\n    };\r\n    handleDeleteUser = async (user) => {\r\n        try {\r\n            let res = await deleteUserService(user.id);\r\n            if (res && res.data.errCode === 0) {\r\n                await this.getAllUserFromReact();\r\n            } else {\r\n                alert(res.data.errMessage);\r\n            }\r\n        } catch (e) {}\r\n    };\r\n    handleEditUser = (user) => {\r\n        this.setState({\r\n            isOpen: true,\r\n            isCreate: false,\r\n            currentIdEdit: user.id,\r\n        });\r\n    };\r\n    render() {\r\n        let arrUser = this.state.userData;\r\n        return (\r\n            <div className=\"users-container\">\r\n                <ModalUser\r\n                    isCreate={this.state.isCreate}\r\n                    isOpen={this.state.isOpen}\r\n                    toggleUser={this.toggleUser}\r\n                    createNewUser={this.createNewUser}\r\n                    editUser={this.editUser}\r\n                    currentIdEdit={this.state.currentIdEdit}\r\n                />\r\n                <div className=\"title text-center\">Manage </div>\r\n                <div className=\"mx-1\">\r\n                    <button\r\n                        className=\"btn btn-primary px-3\"\r\n                        onClick={() => this.handleAddNewUser()}\r\n                    >\r\n                        Add new users\r\n                    </button>\r\n                </div>\r\n                <div className=\"users-table mt-3 mx-1\">\r\n                    <table id=\"customers\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Email</th>\r\n                                <th>First name</th>\r\n                                <th>Last name</th>\r\n                                <th>Address</th>\r\n                                <th>Action</th>\r\n                            </tr>\r\n                            {arrUser &&\r\n                                arrUser.map((user, i) => {\r\n                                    return (\r\n                                        <tr key={i}>\r\n                                            <td>{user.email}</td>\r\n                                            <td>{user.firstName}</td>\r\n                                            <td>{user.lastName}</td>\r\n                                            <td>{user.address}</td>\r\n                                            <td>\r\n                                                <button onClick={() => this.handleEditUser(user)}>\r\n                                                    Edit\r\n                                                </button>\r\n                                                <button onClick={() => this.handleDeleteUser(user)}>\r\n                                                    Delete\r\n                                                </button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    );\r\n                                })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManage);\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './Navigator.scss';\r\n\r\nclass MenuGroup extends Component {\r\n\r\n    render() {\r\n        const { name, children } = this.props;\r\n        return (\r\n            <li className=\"menu-group\">\r\n                <div className=\"menu-group-name\">\r\n                    <FormattedMessage id={name} />\r\n                </div>\r\n                <ul className=\"menu-list list-unstyled\">\r\n                    {children}\r\n                </ul>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nclass Menu extends Component {\r\n\r\n    render() {\r\n        const { name, active, link, children, onClick, hasSubMenu, onLinkClick } = this.props;\r\n        return (\r\n            <li className={\"menu\" + (hasSubMenu ? \" has-sub-menu\" : \"\") + (\"\") + (active ? \" active\" : \"\")}>\r\n                {hasSubMenu ? (\r\n                    <Fragment>\r\n                        <span\r\n                            data-toggle=\"collapse\"\r\n                            className={\"menu-link collapsed\"}\r\n                            onClick={onClick}\r\n                            aria-expanded={\"false\"}\r\n                        >\r\n                            <FormattedMessage id={name} />\r\n                            <div className=\"icon-right\">\r\n                                <i className={\"far fa-angle-right\"} />\r\n                            </div>\r\n                        </span>\r\n                        <div>\r\n                            <ul className=\"sub-menu-list list-unstyled\">\r\n                                {children}\r\n                            </ul>\r\n                        </div>\r\n                    </Fragment>\r\n                ) : (\r\n                        <Link to={link} className=\"menu-link\" onClick={onLinkClick}>\r\n                            <FormattedMessage id={name} />\r\n                        </Link>\r\n                    )}\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nclass SubMenu extends Component {\r\n\r\n    getItemClass = path => {\r\n        return this.props.location.pathname === path ? \"active\" : \"\";\r\n    };\r\n\r\n    render() {\r\n        const { name, link, onLinkClick } = this.props;\r\n        return (\r\n            <li className={\"sub-menu \" + this.getItemClass(link)}>\r\n                <Link to={link} className=\"sub-menu-link\" onClick={onLinkClick}>\r\n                    <FormattedMessage id={name} />\r\n                </Link>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nconst MenuGroupWithRouter = withRouter(MenuGroup);\r\nconst MenuWithRouter = withRouter(Menu);\r\nconst SubMenuWithRouter = withRouter(SubMenu);\r\n\r\nconst withRouterInnerRef = (WrappedComponent) => {\r\n\r\n    class InnerComponentWithRef extends React.Component {\r\n        render() {\r\n            const { forwardRef, ...rest } = this.props;\r\n            return <WrappedComponent {...rest} ref={forwardRef} />;\r\n        }\r\n    }\r\n\r\n    const ComponentWithRef = withRouter(InnerComponentWithRef, { withRef: true });\r\n\r\n    return React.forwardRef((props, ref) => {\r\n        return <ComponentWithRef {...props} forwardRef={ref} />;\r\n    });\r\n};\r\n\r\nclass Navigator extends Component {\r\n    state = {\r\n        expandedMenu: {}\r\n    };\r\n\r\n    toggle = (groupIndex, menuIndex) => {\r\n        const expandedMenu = {};\r\n        const needExpand = !(this.state.expandedMenu[groupIndex + '_' + menuIndex] === true);\r\n        if (needExpand) {\r\n            expandedMenu[groupIndex + '_' + menuIndex] = true;\r\n        }\r\n\r\n        this.setState({\r\n            expandedMenu: expandedMenu\r\n        });\r\n    };\r\n\r\n    isMenuHasSubMenuActive = (location, subMenus, link) => {\r\n        if (subMenus) {\r\n            if (subMenus.length === 0) {\r\n                return false;\r\n            }\r\n\r\n            const currentPath = location.pathname;\r\n            for (let i = 0; i < subMenus.length; i++) {\r\n                const subMenu = subMenus[i];\r\n                if (subMenu.link === currentPath) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (link) {\r\n            return this.props.location.pathname === link;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    checkActiveMenu = () => {\r\n        const { menus, location } = this.props;\r\n        outerLoop:\r\n        for (let i = 0; i < menus.length; i++) {\r\n            const group = menus[i];\r\n            if (group.menus && group.menus.length > 0) {\r\n                for (let j = 0; j < group.menus.length; j++) {\r\n                    const menu = group.menus[j];\r\n                    if (menu.subMenus && menu.subMenus.length > 0) {\r\n                        if (this.isMenuHasSubMenuActive(location, menu.subMenus, null)) {\r\n                            const key = i + '_' + j;\r\n                            this.setState({\r\n                                expandedMenu: {\r\n                                    [key]: true\r\n                                }\r\n                            });\r\n                            break outerLoop;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.checkActiveMenu();\r\n    };\r\n\r\n    // componentWillReceiveProps(nextProps, prevState) {\r\n    //     const { location, setAccountMenuPath, setSettingMenuPath } = this.props;\r\n    //     const { location: nextLocation } = nextProps;\r\n    //     if (location !== nextLocation) {\r\n    //         let pathname = nextLocation && nextLocation.pathname;\r\n    //         if ((pathname.startsWith('/account/') || pathname.startsWith('/fds/account/'))) {\r\n    //             setAccountMenuPath(pathname);\r\n    //         }\r\n    //         if (pathname.startsWith('/settings/')) {\r\n    //             setSettingMenuPath(pathname);\r\n    //         };\r\n    //     };\r\n    // };\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const { location } = this.props;\r\n        const { location: prevLocation } = prevProps;\r\n        if (location !== prevLocation) {\r\n            this.checkActiveMenu();\r\n        };\r\n    };\r\n\r\n    render() {\r\n        const { menus, location, onLinkClick } = this.props;\r\n        return (\r\n            <Fragment>\r\n                <ul className=\"navigator-menu list-unstyled\">\r\n                    {\r\n                        menus.map((group, groupIndex) => {\r\n                            return (\r\n                                <Fragment key={groupIndex}>\r\n                                    <MenuGroupWithRouter name={group.name}>\r\n                                        {group.menus ? (\r\n                                            group.menus.map((menu, menuIndex) => {\r\n                                                const isMenuHasSubMenuActive = this.isMenuHasSubMenuActive(location, menu.subMenus, menu.link);\r\n                                                const isSubMenuOpen = this.state.expandedMenu[groupIndex + '_' + menuIndex] === true;\r\n                                                return (\r\n                                                    <MenuWithRouter\r\n                                                        key={menuIndex}\r\n                                                        active={isMenuHasSubMenuActive}\r\n                                                        name={menu.name}\r\n                                                        link={menu.link}\r\n                                                        hasSubMenu={menu.subMenus}\r\n                                                        isOpen={isSubMenuOpen}\r\n                                                        onClick={() => this.toggle(groupIndex, menuIndex)}\r\n                                                        onLinkClick={onLinkClick}\r\n                                                    >\r\n                                                        {menu.subMenus && menu.subMenus.map((subMenu, subMenuIndex) => (\r\n                                                            <SubMenuWithRouter\r\n                                                                key={subMenuIndex}\r\n                                                                name={subMenu.name}\r\n                                                                link={subMenu.link}\r\n                                                                onClick={this.closeOtherExpand}\r\n                                                                onLinkClick={onLinkClick}\r\n                                                            />\r\n                                                        ))}\r\n                                                    </MenuWithRouter>\r\n                                                );\r\n                                            })\r\n                                        ) : null}\r\n                                    </MenuGroupWithRouter>\r\n                                </Fragment>\r\n                            );\r\n                        })\r\n                    }\r\n                </ul>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default withRouterInnerRef(connect(mapStateToProps, mapDispatchToProps)(Navigator));\r\n","export const adminMenu = [\r\n    {\r\n        //quan li nguoi dung\r\n        name: 'menu.admin.manage-user',\r\n        menus: [\r\n            {\r\n                name: 'menu.admin.crud',\r\n                link: '/system/user-manage',\r\n            },\r\n            {\r\n                name: 'menu.admin.crud-redux',\r\n                link: '/system/user-redux',\r\n            },\r\n            {\r\n                name: 'menu.admin.manage-doctor',\r\n                link: '/system/manage-doctor',\r\n            },\r\n            {\r\n                name: 'menu.doctor.manage-schedule',\r\n                link: '/doctor/manage-schedule',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        //quan li phong kham\r\n\r\n        name: 'menu.admin.clinic',\r\n        menus: [\r\n            {\r\n                name: 'menu.admin.manage-clinic',\r\n                link: '/system/manage-clinic',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        //quan li chuyen khoa\r\n        name: 'menu.admin.specialty',\r\n        menus: [\r\n            {\r\n                name: 'menu.admin.manage-specialty',\r\n                link: '/system/manage-specialty',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        //quan li vam nang\r\n        name: 'menu.admin.handbook',\r\n        menus: [\r\n            {\r\n                name: 'menu.admin.manage-handbook',\r\n                link: '/system/manage-handbook',\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\nexport const doctorMenu = [\r\n    {\r\n        name: 'menu.admin.manage-user',\r\n        menus: [\r\n            {\r\n                name: 'menu.doctor.manage-schedule',\r\n                link: '/doctor/manage-schedule',\r\n            },\r\n            {\r\n                name: 'menu.doctor.manage-patient',\r\n                link: '/doctor/manage-patient',\r\n            },\r\n        ],\r\n    },\r\n];\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/actions';\r\nimport Navigator from '../../components/Navigator';\r\nimport { adminMenu, doctorMenu } from './menuApp';\r\nimport './Header.scss';\r\nimport { LANGUAGES, USER_ROLE } from '../../utils';\r\nimport { changeLanguageApp } from '../../store/actions';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport _ from 'lodash';\r\n\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            menuApp: [],\r\n        };\r\n    }\r\n\r\n    handleChangeLanguage = (language) => {\r\n        this.props.changeLanguageAppRedux(language);\r\n    };\r\n\r\n    componentDidMount() {\r\n        let { userInfo } = this.props;\r\n        let menu = [];\r\n        if (userInfo && !_.isEmpty(userInfo)) {\r\n            let role = userInfo.roleId;\r\n            if (role === USER_ROLE.ADMIN) {\r\n                menu = adminMenu;\r\n            }\r\n\r\n            if (role === USER_ROLE.DOCTOR) {\r\n                menu = doctorMenu;\r\n            }\r\n        }\r\n        this.setState({\r\n            menuApp: menu,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { processLogout, language, userInfo } = this.props;\r\n        return (\r\n            <div className=\"header-container\">\r\n                {/* thanh navigator */}\r\n                <div className=\"header-tabs-container\">\r\n                    <Navigator menus={this.state.menuApp} />\r\n                </div>\r\n\r\n                <div className=\"languages\">\r\n                    <span className=\"welcome\">\r\n                        <FormattedMessage id=\"home-header.welcome\" />\r\n                        {userInfo && userInfo.firstName\r\n                            ? `, ${userInfo.firstName} ${userInfo.lastName} `\r\n                            : ''}\r\n                        !\r\n                    </span>\r\n                    <span\r\n                        className={language === LANGUAGES.VI ? 'language-vi active' : 'language-vi'}\r\n                        onClick={() => this.handleChangeLanguage(LANGUAGES.VI)}\r\n                    >\r\n                        VN\r\n                    </span>\r\n                    <span\r\n                        className={language === LANGUAGES.EN ? 'language-en active' : 'language-en'}\r\n                        onClick={() => this.handleChangeLanguage(LANGUAGES.EN)}\r\n                    >\r\n                        EN\r\n                    </span>\r\n                </div>\r\n                {/* nút logout */}\r\n                <div className=\"btn btn-logout\" onClick={processLogout}>\r\n                    <i className=\"fas fa-sign-out-alt\"></i>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        userInfo: state.user.userInfo,\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        processLogout: () => dispatch(actions.processLogout()),\r\n        changeLanguageAppRedux: (language) => dispatch(changeLanguageApp(language)),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './TableManageUser.scss';\r\nimport * as actions from '../../../store/actions';\r\nimport MarkdownIt from 'markdown-it';\r\nimport MdEditor from 'react-markdown-editor-lite';\r\nimport 'react-markdown-editor-lite/lib/index.css';\r\nimport './ManageDoctor.scss';\r\nimport Select from 'react-select';\r\nimport { LANGUAGES, CRUD_ACTIONS } from '../../../utils';\r\nimport { getDetailDoctorByIdService } from '../../../services/userService';\r\n\r\nconst option = [\r\n    { value: 'chocolate', label: 'chocolate' },\r\n    { value: 'strawberry', label: 'strawberry' },\r\n    { value: 'vanilla', label: 'vanilla' },\r\n];\r\n\r\nconst mdParser = new MarkdownIt();\r\n\r\nclass ManageDoctor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            contentMarkdown: '',\r\n            contentHTML: '',\r\n            selectedOption: '',\r\n            description: '',\r\n            listDoctor: [],\r\n            hasOldData: false,\r\n\r\n            listPrice: [],\r\n            listPayment: [],\r\n            listProvince: [],\r\n            listClinic: [],\r\n            listSpecialty: [],\r\n\r\n            selectedPrice: '',\r\n            selectedPayment: '',\r\n            selectedProvince: '',\r\n            selectedClinic: '',\r\n            selectedSpecialty: '',\r\n\r\n            nameClinic: '',\r\n            addressClinic: '',\r\n            note: '',\r\n            clinicId: '',\r\n            specialtyId: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchAllDoctors();\r\n        this.props.getAllRequiredDoctorInfo();\r\n    }\r\n\r\n    buildDataInputSelect = (inputData, type) => {\r\n        let result = [];\r\n        let { language } = this.props;\r\n        if (inputData && inputData.length > 0) {\r\n            if (type === 'USER') {\r\n                inputData.map((item, i) => {\r\n                    let object = {};\r\n                    let labelVi = `${item.lastName} ${item.firstName}`;\r\n                    let labelEn = `${item.firstName} ${item.lastName}`;\r\n                    object.label = language === LANGUAGES.VI ? labelVi : labelEn;\r\n                    object.value = item.id;\r\n                    result.push(object);\r\n                });\r\n            }\r\n            if (type === 'PRICE') {\r\n                inputData.map((item, i) => {\r\n                    let object = {};\r\n                    let labelVi = `${item.valueVi} `;\r\n                    let labelEn = `${item.valueEn} USD`;\r\n                    object.label = language === LANGUAGES.VI ? labelVi : labelEn;\r\n                    object.value = item.keyMap;\r\n                    result.push(object);\r\n                });\r\n            }\r\n            if (type === 'PAYMENT' || type === 'PROVINCE') {\r\n                inputData.map((item, i) => {\r\n                    let object = {};\r\n                    let labelVi = `${item.valueVi} `;\r\n                    let labelEn = `${item.valueEn} `;\r\n                    object.label = language === LANGUAGES.VI ? labelVi : labelEn;\r\n                    object.value = item.keyMap;\r\n                    result.push(object);\r\n                });\r\n            }\r\n\r\n            if (type === 'SPECIALTY') {\r\n                inputData.map((item, i) => {\r\n                    let object = {};\r\n                    object.label = item.name;\r\n                    object.value = item.id;\r\n                    result.push(object);\r\n                });\r\n            }\r\n            if (type === 'CLINIC') {\r\n                inputData.map((item, i) => {\r\n                    let object = {};\r\n                    object.label = item.name;\r\n                    object.value = item.id;\r\n                    result.push(object);\r\n                });\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.allDoctors !== this.props.allDoctors) {\r\n            let dataSelect = this.buildDataInputSelect(this.props.allDoctors, 'USER');\r\n            this.setState({\r\n                listDoctor: dataSelect,\r\n            });\r\n        }\r\n        if (prevProps.language !== this.props.language) {\r\n            let { resPayment, resPrice, resProvince, resSpecialty, resClinic } =\r\n                this.props.allRequiredDoctorInfo;\r\n            let dataSelectPrice = this.buildDataInputSelect(resPrice, 'PRICE');\r\n            let dataSelectPayment = this.buildDataInputSelect(resPayment, 'PAYMENT');\r\n            let dataSelectProvince = this.buildDataInputSelect(resProvince, 'PROVINCE');\r\n            let dataSelectSpecialty = this.buildDataInputSelect(resSpecialty, 'SPECIALTY');\r\n            let dataSelectClinic = this.buildDataInputSelect(resClinic, 'CLINIC');\r\n            this.setState({\r\n                listPrice: dataSelectPrice,\r\n                listPayment: dataSelectPayment,\r\n                listProvince: dataSelectProvince,\r\n                listSpecialty: dataSelectSpecialty,\r\n                listClinic: dataSelectClinic,\r\n            });\r\n        }\r\n\r\n        if (prevProps.allRequiredDoctorInfo !== this.props.allRequiredDoctorInfo) {\r\n            let { resPayment, resPrice, resProvince, resSpecialty, resClinic } =\r\n                this.props.allRequiredDoctorInfo;\r\n            let dataSelectPrice = this.buildDataInputSelect(resPrice, 'PRICE');\r\n            let dataSelectPayment = this.buildDataInputSelect(resPayment, 'PAYMENT');\r\n            let dataSelectProvince = this.buildDataInputSelect(resProvince, 'PROVINCE');\r\n            let dataSelectSpecialty = this.buildDataInputSelect(resSpecialty, 'SPECIALTY');\r\n            let dataSelectClinic = this.buildDataInputSelect(resClinic, 'CLINIC');\r\n\r\n            this.setState({\r\n                listPrice: dataSelectPrice,\r\n                listPayment: dataSelectPayment,\r\n                listProvince: dataSelectProvince,\r\n                listSpecialty: dataSelectSpecialty,\r\n                listClinic: dataSelectClinic,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleGetData = () => {\r\n        this.props.getDetailDoctorById(this.state.currentId);\r\n        if (this.props.detailDoctor.Markdown) {\r\n            this.setState({\r\n                contentMarkdown: this.props.detailDoctor.Markdown.contentMarkdown,\r\n                contentHTML: this.props.detailDoctor.Markdown.contentHTML,\r\n                description: this.props.detailDoctor.Markdown.description,\r\n            });\r\n        }\r\n    };\r\n\r\n    handleEditorChange = ({ html, text }) => {\r\n        this.setState({\r\n            contentMarkdown: text,\r\n            contentHTML: html,\r\n        });\r\n    };\r\n    handleSaveContentMarkdown = () => {\r\n        let { hasOldData } = this.state;\r\n        this.props.saveDetailDoctor({\r\n            contentHTML: this.state.contentHTML,\r\n            contentMarkdown: this.state.contentMarkdown,\r\n            description: this.state.description,\r\n            doctorId: this.state.selectedOption.value,\r\n            action: hasOldData === true ? CRUD_ACTIONS.EDIT : CRUD_ACTIONS.CREATE,\r\n\r\n            selectedPrice: this.state.selectedPrice.value,\r\n            selectedPayment: this.state.selectedPayment.value,\r\n            selectedProvince: this.state.selectedProvince.value,\r\n            selectedSpecialty: this.state.selectedSpecialty.value,\r\n            selectedClinic: this.state.selectedClinic.value,\r\n            nameClinic: this.state.nameClinic,\r\n            addressClinic: this.state.addressClinic,\r\n            note: this.state.note,\r\n            clinicId:\r\n                this.state.selectedClinic && this.state.selectedClinic.value\r\n                    ? this.state.selectedClinic.value\r\n                    : '',\r\n            specialtyId: this.state.selectedSpecialty.value,\r\n        });\r\n    };\r\n    handleChangeSelect = async (selectedOption) => {\r\n        this.setState({\r\n            selectedOption,\r\n        });\r\n        let { listPayment, listPrice, listProvince, listSpecialty, listClinic } = this.state;\r\n        let res = await getDetailDoctorByIdService(selectedOption.value);\r\n        console.log(res);\r\n        if (res && res.data.data.Markdown) {\r\n            let markdown = res.data.data.Markdown;\r\n            let selectedPrice = '',\r\n                selectedPayment = '',\r\n                selectedProvince = '',\r\n                selectedSpecialty = '',\r\n                selectedClinic = '',\r\n                specialtyId = '',\r\n                provinceId = '',\r\n                priceId = '',\r\n                paymentId = '',\r\n                clinicId = '',\r\n                nameClinic = '',\r\n                addressClinic = '',\r\n                note = '';\r\n            let doctor_info = res.data.data.Doctor_Info;\r\n            if (res.data.data.Doctor_Info) {\r\n                priceId = doctor_info.priceId;\r\n                paymentId = doctor_info.paymentId;\r\n                provinceId = doctor_info.provinceId;\r\n                clinicId = doctor_info.clinicId;\r\n                nameClinic = doctor_info.nameClinic;\r\n                addressClinic = doctor_info.addressClinic;\r\n                specialtyId = doctor_info.specialtyId;\r\n                note = doctor_info.note;\r\n\r\n                selectedPayment = listPayment.find((item) => {\r\n                    return item && item.value === paymentId;\r\n                });\r\n                selectedPrice = listPrice.find((item) => {\r\n                    return item && item.value === priceId;\r\n                });\r\n                selectedProvince = listProvince.find((item) => {\r\n                    return item && item.value === provinceId;\r\n                });\r\n                selectedSpecialty = listSpecialty.find((item) => {\r\n                    return item && item.value === specialtyId;\r\n                });\r\n                selectedClinic = listClinic.find((item) => {\r\n                    return item && item.value === clinicId;\r\n                });\r\n            }\r\n\r\n            this.setState({\r\n                contentHTML: markdown.contentHTML,\r\n                contentMarkdown: markdown.contentMarkdown,\r\n                description: markdown.description,\r\n                hasOldData: true,\r\n\r\n                selectedPrice,\r\n                selectedPayment,\r\n                selectedProvince,\r\n                selectedSpecialty,\r\n                selectedClinic,\r\n                nameClinic,\r\n                addressClinic,\r\n                note,\r\n            });\r\n        } else {\r\n            this.setState({\r\n                contentMarkdown: '',\r\n                contentHTML: '',\r\n                description: '',\r\n                hasOldData: false,\r\n                nameClinic: '',\r\n                addressClinic: '',\r\n                note: '',\r\n\r\n                selectedPrice: '',\r\n                selectedPayment: '',\r\n                selectedProvince: '',\r\n                selectedSpecialty: '',\r\n                selectedClinic: '',\r\n            });\r\n        }\r\n    };\r\n\r\n    handleOnChangeSelectDoctorInfo = async (selectedOption, name) => {\r\n        let stateName = name.name;\r\n        let stateCopy = { ...this.state };\r\n        stateCopy[stateName] = selectedOption;\r\n        this.setState({\r\n            ...stateCopy,\r\n        });\r\n    };\r\n\r\n    handleOnChangeText = (e, id) => {\r\n        let stateCopy = { ...this.state };\r\n        stateCopy[id] = e.target.value;\r\n        this.setState({\r\n            ...stateCopy,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        let { hasOldData } = this.state;\r\n\r\n        return (\r\n            <div className=\"manage-doctor-container\">\r\n                <div className=\"manage-doctor-title\">\r\n                    <FormattedMessage id=\"admin.manage-doctor.title\" />\r\n                </div>\r\n                <div className=\"more-info\">\r\n                    <div className=\"content-left form-group\">\r\n                        <label>\r\n                            <FormattedMessage id=\"admin.manage-doctor.select-doctor\" />\r\n                        </label>\r\n                        <Select\r\n                            value={this.state.selectedOption}\r\n                            onChange={this.handleChangeSelect}\r\n                            options={this.state.listDoctor}\r\n                            placeholder={\r\n                                <FormattedMessage id=\"admin.manage-doctor.select-doctor\" />\r\n                            }\r\n                        />\r\n                    </div>\r\n                    <div className=\"content-right\">\r\n                        <label>\r\n                            <FormattedMessage id=\"admin.manage-doctor.intro\" />\r\n                        </label>\r\n                        <textarea\r\n                            className=\"form-control\"\r\n                            rows=\"4\"\r\n                            onChange={(e) => this.handleOnChangeText(e, 'description')}\r\n                            value={this.state.description}\r\n                        ></textarea>\r\n                    </div>\r\n                </div>\r\n                <div className=\"more-info-extra row\">\r\n                    <div className=\"col-4 form-group\">\r\n                        <label>\r\n                            <FormattedMessage id=\"admin.manage-doctor.price\" />\r\n                        </label>\r\n                        <Select\r\n                            options={this.state.listPrice}\r\n                            value={this.state.selectedPrice}\r\n                            onChange={this.handleOnChangeSelectDoctorInfo}\r\n                            placeholder={<FormattedMessage id=\"admin.manage-doctor.price\" />}\r\n                            name=\"selectedPrice\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-4 form-group\">\r\n                        <label>\r\n                            <FormattedMessage id=\"admin.manage-doctor.payment\" />\r\n                        </label>\r\n                        <Select\r\n                            options={this.state.listPayment}\r\n                            value={this.state.selectedPayment}\r\n                            onChange={this.handleOnChangeSelectDoctorInfo}\r\n                            placeholder={<FormattedMessage id=\"admin.manage-doctor.payment\" />}\r\n                            name=\"selectedPayment\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-4 form-group\">\r\n                        <label>\r\n                            <FormattedMessage id=\"admin.manage-doctor.province\" />\r\n                        </label>\r\n                        <Select\r\n                            options={this.state.listProvince}\r\n                            value={this.state.selectedProvince}\r\n                            onChange={this.handleOnChangeSelectDoctorInfo}\r\n                            placeholder={<FormattedMessage id=\"admin.manage-doctor.province\" />}\r\n                            name=\"selectedProvince\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-4 form-group\">\r\n                        <label>\r\n                            <FormattedMessage id=\"admin.manage-doctor.nameClinic\" />\r\n                        </label>\r\n                        <input\r\n                            className=\"form-control\"\r\n                            onChange={(e) => this.handleOnChangeText(e, 'nameClinic')}\r\n                            value={this.state.nameClinic}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-4 form-group\">\r\n                        <label>\r\n                            <FormattedMessage id=\"admin.manage-doctor.addressClinic\" />\r\n                        </label>\r\n                        <input\r\n                            className=\"form-control\"\r\n                            onChange={(e) => this.handleOnChangeText(e, 'addressClinic')}\r\n                            value={this.state.addressClinic}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-4 form-group\">\r\n                        <label>\r\n                            <FormattedMessage id=\"admin.manage-doctor.note\" />\r\n                        </label>\r\n                        <input\r\n                            className=\"form-control\"\r\n                            onChange={(e) => this.handleOnChangeText(e, 'note')}\r\n                            value={this.state.note}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-4 form-group\">\r\n                        <label>\r\n                            <FormattedMessage id=\"admin.manage-doctor.specialty\" />\r\n                        </label>\r\n                        <Select\r\n                            value={this.state.selectedSpecialty}\r\n                            options={this.state.listSpecialty}\r\n                            placeholder={<FormattedMessage id=\"admin.manage-doctor.specialty\" />}\r\n                            onChange={this.handleOnChangeSelectDoctorInfo}\r\n                            name=\"selectedSpecialty\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-4 form-group\">\r\n                        <label>\r\n                            <FormattedMessage id=\"admin.manage-doctor.select-clinic\" />\r\n                        </label>\r\n                        <Select\r\n                            value={this.state.selectedClinic}\r\n                            options={this.state.listClinic}\r\n                            placeholder={\r\n                                <FormattedMessage id=\"admin.manage-doctor.select-doctor\" />\r\n                            }\r\n                            onChange={this.handleOnChangeSelectDoctorInfo}\r\n                            name=\"selectedClinic\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"manage-doctor-editor\">\r\n                    <MdEditor\r\n                        style={{ height: '300px' }}\r\n                        renderHTML={(text) => mdParser.render(text)}\r\n                        onChange={this.handleEditorChange}\r\n                        value={this.state.contentMarkdown}\r\n                    />\r\n                </div>\r\n                <button\r\n                    onClick={() => this.handleSaveContentMarkdown()}\r\n                    className={\r\n                        hasOldData === true ? 'save-content-doctor' : 'create-content-doctor'\r\n                    }\r\n                >\r\n                    {hasOldData === true ? (\r\n                        <span>\r\n                            <FormattedMessage id=\"admin.manage-doctor.save\" />\r\n                        </span>\r\n                    ) : (\r\n                        <span>\r\n                            <FormattedMessage id=\"admin.manage-doctor.add\" />\r\n                        </span>\r\n                    )}\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        allDoctors: state.admin.allDoctors,\r\n        language: state.app.language,\r\n        allRequiredDoctorInfo: state.admin.allRequiredDoctorInfo,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchAllDoctors: () => dispatch(actions.fetchAllDoctors()),\r\n        saveDetailDoctor: (data) => dispatch(actions.saveDetailDoctor(data)),\r\n        getAllRequiredDoctorInfo: () => dispatch(actions.getAllRequiredDoctorInfo()),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageDoctor);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport './ManageSpecialty.scss';\r\nimport MarkdownIt from 'markdown-it';\r\nimport MdEditor from 'react-markdown-editor-lite';\r\nimport { CommonUtils } from '../../../utils';\r\nimport { createNewSpecialty } from '../../../services/userService';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst mdParser = new MarkdownIt(/* Markdown-it option*/);\r\n\r\nclass ManageSpecialty extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            imageBase64: '',\r\n            descriptionHTML: '',\r\n            descriptionMarkdown: '',\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {}\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n        }\r\n    }\r\n\r\n    handleOnchangeInput = (e, id) => {\r\n        let stateCopy = { ...this.state };\r\n        stateCopy[id] = e.target.value;\r\n        this.setState({\r\n            ...stateCopy,\r\n        });\r\n    };\r\n\r\n    handleEditChange = ({ html, text }) => {\r\n        this.setState({\r\n            descriptionHTML: html,\r\n            descriptionMarkdown: text,\r\n        });\r\n    };\r\n\r\n    handleOnchangeImage = async (e) => {\r\n        let data = e.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            this.setState({\r\n                imageBase64: base64,\r\n            });\r\n        }\r\n    };\r\n\r\n    handleSaveNewSpecialty = async () => {\r\n        let res = await createNewSpecialty(this.state);\r\n        if (res && res.data.errCode === 0) {\r\n            toast.success('Add new specialty succeed');\r\n            this.setState({\r\n                name: '',\r\n                imageBase64: '',\r\n                descriptionHTML: '',\r\n                descriptionMarkdown: '',\r\n            });\r\n        } else {\r\n            toast.error('Add new specialty error');\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"manage-specialty-container\">\r\n                <div className=\"ms-title\">Quản lí chuyên khoa</div>\r\n                <div className=\"add-new-specialty row\">\r\n                    <div className=\"col-6 form-group\">\r\n                        <label>Tên chuyên khoa</label>\r\n                        <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            value={this.state.name}\r\n                            onChange={(e) => this.handleOnchangeInput(e, 'name')}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-6 form-group\">\r\n                        <label>ảnh chuyên khoa</label>\r\n                        <input\r\n                            className=\"form-control-file\"\r\n                            type=\"file\"\r\n                            onChange={(e) => this.handleOnchangeImage(e)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                        <MdEditor\r\n                            style={{ height: '300px' }}\r\n                            renderHTML={(text) => mdParser.render(text)}\r\n                            onChange={this.handleEditChange}\r\n                            value={this.state.descriptionMarkdown}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                        <button\r\n                            className=\"btn-save-specialty\"\r\n                            onClick={() => this.handleSaveNewSpecialty()}\r\n                        >\r\n                            Save\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        // changeLanguageAppRedux: (language) => dispatch(changeLanguageApp(language)),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageSpecialty);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './ManageClinic.scss';\r\nimport MarkdownIt from 'markdown-it';\r\nimport MdEditor from 'react-markdown-editor-lite';\r\nimport { CommonUtils } from '../../../utils';\r\nimport { toast } from 'react-toastify';\r\nimport { createNewClinic } from '../../../services/userService';\r\n\r\nconst mdParser = new MarkdownIt();\r\n\r\nclass ManageClinic extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            imageBase64: '',\r\n            descriptionHTML: '',\r\n            descriptionMarkdown: '',\r\n            address: '',\r\n        };\r\n    }\r\n\r\n    handleOnchangeInput = (e, id) => {\r\n        let stateCopy = { ...this.state };\r\n        stateCopy[id] = e.target.value;\r\n        this.setState({\r\n            ...stateCopy,\r\n        });\r\n    };\r\n\r\n    handleEditChange = ({ html, text }) => {\r\n        this.setState({\r\n            descriptionHTML: html,\r\n            descriptionMarkdown: text,\r\n        });\r\n    };\r\n\r\n    handleOnchangeImage = async (e) => {\r\n        let data = e.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            this.setState({\r\n                imageBase64: base64,\r\n            });\r\n        }\r\n    };\r\n\r\n    handleSaveNewClinic = async () => {\r\n        let res = await createNewClinic(this.state);\r\n        if (res && res.data.errCode === 0) {\r\n            toast.success('Add new specialty succeed');\r\n            this.setState({\r\n                name: '',\r\n                imageBase64: '',\r\n                descriptionHTML: '',\r\n                descriptionMarkdown: '',\r\n                address: '',\r\n            });\r\n        } else {\r\n            toast.error('Add new specialty error');\r\n            console.log(res);\r\n        }\r\n    };\r\n    async componentDidMount() {}\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { isShowDetail, extraInfo } = this.state;\r\n        let { language } = this.props;\r\n        return (\r\n            <div className=\"manage-specialty-container\">\r\n                <div className=\"ms-title\">Quản lí chuyên khoa</div>\r\n                <div className=\"add-new-specialty row\">\r\n                    <div className=\"col-6 form-group\">\r\n                        <label>Tên chuyên khoa</label>\r\n                        <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            value={this.state.name}\r\n                            onChange={(e) => this.handleOnchangeInput(e, 'name')}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-6 form-group\">\r\n                        <label>Địa chỉ</label>\r\n                        <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            value={this.state.address}\r\n                            onChange={(e) => this.handleOnchangeInput(e, 'address')}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-6 form-group\">\r\n                        <label>ảnh chuyên khoa</label>\r\n                        <input\r\n                            className=\"form-control-file\"\r\n                            type=\"file\"\r\n                            onChange={(e) => this.handleOnchangeImage(e)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                        <MdEditor\r\n                            style={{ height: '600px' }}\r\n                            renderHTML={(text) => mdParser.render(text)}\r\n                            onChange={this.handleEditChange}\r\n                            value={this.state.descriptionMarkdown}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                        <button\r\n                            className=\"btn-save-specialty\"\r\n                            onClick={() => this.handleSaveNewClinic()}\r\n                        >\r\n                            Save\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageClinic);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport UserManage from '../containers/System/UserManage';\r\nimport Header from '../containers/Header/Header';\r\nimport UserRedux from '../containers/System/Admin/UserRedux';\r\nimport ManageDoctor from '../containers/System/Admin/ManageDoctor';\r\nimport ManageSpecialty from '../containers/System/Specialty/ManageSpecialty';\r\nimport ManageClinic from '../containers/System/Clinic/ManageClinic';\r\n\r\nclass System extends Component {\r\n    render() {\r\n        const { systemMenuPath, isLoggedIn } = this.props;\r\n        return (\r\n            <>\r\n                {isLoggedIn && <Header />}\r\n                <div className=\"system-container\">\r\n                    <div className=\"system-list\">\r\n                        <Switch>\r\n                            <Route path=\"/system/user-manage\" component={UserManage} />\r\n                            <Route path=\"/system/user-redux\" component={UserRedux} />\r\n                            <Route path=\"/system/manage-doctor\" component={ManageDoctor} />\r\n                            <Route path=\"/system/manage-specialty\" component={ManageSpecialty} />\r\n                            <Route path=\"/system/manage-clinic\" component={ManageClinic} />\r\n                            <Route\r\n                                component={() => {\r\n                                    return <Redirect to={systemMenuPath} />;\r\n                                }}\r\n                            />\r\n                        </Switch>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        systemMenuPath: state.app.systemMenuPath,\r\n        isLoggedIn: state.user.isLoggedIn,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(System);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport Slider from 'react-slick';\r\nimport { getAllSpecialty } from '../../../services/userService';\r\nimport { withRouter } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Specialty extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dataSpecialty: [],\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let res = await getAllSpecialty();\r\n        if (res && res.data.errCode === 0) {\r\n            this.setState({\r\n                dataSpecialty: res.data.data ? res.data.data : [],\r\n            });\r\n        }\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n        }\r\n    }\r\n\r\n    handleViewDetailSpecialty = (item) => {\r\n        if (this.props.history) {\r\n            this.props.history.push(`/detail-specialty/${item.id}`);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let { dataSpecialty } = this.state;\r\n        return (\r\n            <div className=\"section-share section-specialty\">\r\n                <div className=\"section-container\">\r\n                    <div className=\"section-header\">\r\n                        <span className=\"title-section\">\r\n                            <FormattedMessage id=\"homepage.specialty-popular\" />\r\n                        </span>\r\n                        <Link className=\"btn-section\" to=\"/all-specialty\">\r\n                            <FormattedMessage id=\"homepage.more-info\" />\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"section-body\">\r\n                        <Slider {...this.props.settings}>\r\n                            {dataSpecialty &&\r\n                                dataSpecialty.length > 0 &&\r\n                                dataSpecialty.map((item, i) => {\r\n                                    return (\r\n                                        <div\r\n                                            className=\"section-customize specialty-child\"\r\n                                            key={i}\r\n                                            onClick={() => this.handleViewDetailSpecialty(item)}\r\n                                        >\r\n                                            <div\r\n                                                className=\"bg-image section-specialty\"\r\n                                                style={{ backgroundImage: `url(${item.image})` }}\r\n                                            />\r\n                                            <div className=\"specialty-name\">{item.name}</div>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                        </Slider>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {};\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Specialty));\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport Slider from 'react-slick';\r\nimport { getAllClinic } from '../../../services/userService';\r\nimport { withRouter } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass MedicalFacility extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dataClinics: [],\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let res = await getAllClinic();\r\n        if (res && res.data.errCode === 0) {\r\n            this.setState({\r\n                dataClinics: res.data.data ? res.data.data : [],\r\n            });\r\n        }\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n        }\r\n    }\r\n\r\n    handleViewDetailClinic = (item) => {\r\n        if (this.props.history) {\r\n            this.props.history.push(`/detail-clinic/${item.id}`);\r\n        }\r\n    };\r\n    render() {\r\n        let { dataClinics } = this.state;\r\n        return (\r\n            <div className=\"section-share section-medical-facility \">\r\n                <div className=\"section-container\">\r\n                    <div className=\"section-header\">\r\n                        <span className=\"title-section\">\r\n                            <FormattedMessage id=\"homepage.clinic\" />\r\n                        </span>\r\n                        <Link className=\"btn-section\" to=\"/all-clinic\">\r\n                            <FormattedMessage id=\"homepage.more-info\" />\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"section-body\">\r\n                        <Slider {...this.props.settings}>\r\n                            {dataClinics &&\r\n                                dataClinics.length > 0 &&\r\n                                dataClinics.map((item, i) => {\r\n                                    return (\r\n                                        <div\r\n                                            className=\"section-customize clinic-child\"\r\n                                            key={i}\r\n                                            onClick={() => this.handleViewDetailClinic(item)}\r\n                                        >\r\n                                            <div\r\n                                                className=\"bg-image section-medical-facility\"\r\n                                                style={{ backgroundImage: `url(${item.image})` }}\r\n                                            />\r\n                                            <div className=\"clinic-name\">{item.name}</div>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                        </Slider>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {};\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MedicalFacility));\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Slider from 'react-slick';\r\n\r\nclass HandBook extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"section-share section-handbook\">\r\n                <div className=\"section-container\">\r\n                    <div className=\"section-header\">\r\n                        <span className=\"title-section\">Cam nang</span>\r\n                        <button className=\"btn-section\">xem them</button>\r\n                    </div>\r\n                    <div className=\"section-body\">\r\n                        <Slider {...this.props.settings}>\r\n                            <div className=\"section-customize \">\r\n                                <div className=\"bg-image section-handbook\" />\r\n                                <div>Cơ xương khớp 1 </div>\r\n                            </div>\r\n                            <div className=\"section-customize \">\r\n                                <div className=\"bg-image section-handbook\" />\r\n                                <div>Cơ xương khớp 2 </div>\r\n                            </div>\r\n                            <div className=\"section-customize \">\r\n                                <div className=\"bg-image section-handbook\" />\r\n                                <div>Cơ xương khớp 3 </div>\r\n                            </div>\r\n                            <div className=\"section-customize \">\r\n                                <div className=\"bg-image section-handbook\" />\r\n                                <div>Cơ xương khớp 4 </div>\r\n                            </div>\r\n                            <div className=\"section-customize \">\r\n                                <div className=\"bg-image section-handbook\" />\r\n                                <div>Cơ xương khớp 5 </div>\r\n                            </div>\r\n                            <div className=\"section-customize \">\r\n                                <div className=\"bg-image section-handbook\" />\r\n                                <div>Cơ xương khớp 6 </div>\r\n                            </div>\r\n                        </Slider>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HandBook);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass About extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"section-share section-about\">\r\n                <div className=\"section-about-header\">Truyền thông nói gì</div>\r\n                <div className=\"section-about-content\">\r\n                    <div className=\"content-left\">\r\n                        <iframe\r\n                            width=\"100%\"\r\n                            height=\"400px\"\r\n                            src=\"https://www.youtube.com/embed/FyDQljKtWnI?si=mwExZCIQ5oGt2ez7\"\r\n                            title=\"YouTube video player\"\r\n                            frameBorder=\"0\"\r\n                            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\r\n                            allowFullScreen\r\n                        ></iframe>\r\n                    </div>\r\n                    <div className=\"content-right\">\r\n                        <div>\r\n                            BookingCare là Nền tảng Y tế chăm sóc sức khỏe toàn diện cung cấp nền\r\n                            tảng công nghệ giúp bệnh nhân dễ dàng lựa chọn dịch vụ y tế từ mạng lưới\r\n                            bác sĩ chuyên khoa giỏi, phòng khám/ bệnh viện uy tín với thông tin đã\r\n                            xác thực và đặt lịch nhanh chóng.\r\n                        </div>\r\n                        <div>\r\n                            <span>\r\n                                Chúng tôi hiểu rằng, người bệnh xứng đáng được lựa chọn dịch vụ y tế\r\n                                chất lượng cao, như là:\r\n                            </span>\r\n                            <ul>\r\n                                <li>Đi khám đúng bác sĩ với vấn đề của mình</li>\r\n                                <li>Khám với bác sĩ chuyên khoa giỏi</li>\r\n                                <li>\r\n                                    Thông tin bác sĩ đã được xác thực rõ ràng từ chuyên khoa, quá\r\n                                    trình đào tạo, kinh nghiệm công tác\r\n                                </li>\r\n                                <li>\r\n                                    Cơ sở y tế tiện nghi, giá cả dịch vụ hợp lý, công khai minh bạch\r\n                                </li>\r\n                                <li>Trang thiết bị y tế hiện đại, hỗ trợ chẩn đoán chính xác</li>\r\n                                <li>Giảm thiểu thời gian chờ đợi, xếp hàng</li>\r\n                                <li>Đặt lịch khám đơn giản, bất kỳ lúc nào, ở đâu.</li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(About);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass HomeFooter extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"home-footer\">\r\n                <p>\r\n                    &copy; 2023 TanTH3. More info find me\r\n                    <a\r\n                        target=\"_blank\"\r\n                        href=\"https://www.facebook.com/phamthanhtan.21\"\r\n                        style={{ marginLeft: '5px' }}\r\n                    >\r\n                        here\r\n                    </a>\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeFooter);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport HomeHeader from './HomeHeader';\r\nimport Specialty from './Section/Specialty';\r\nimport MedicalFacility from './Section/MedicalFacility';\r\nimport OutStandingDoctor from './Section/OutStandingDoctor';\r\nimport HandBook from './Section/HandBook';\r\nimport About from './Section/About';\r\nimport HomeFooter from './HomeFooter';\r\n\r\nimport './HomePage.scss';\r\nimport 'slick-carousel/slick/slick.css';\r\nimport 'slick-carousel/slick/slick-theme.css';\r\n\r\nclass HomePage extends Component {\r\n    render() {\r\n        let settings = {\r\n            dots: false,\r\n            infinite: false,\r\n            speed: 500,\r\n            slidesToShow: 4,\r\n            slidesToScroll: 1,\r\n        };\r\n        return (\r\n            <div className=\"homepage-container\">\r\n                <HomeHeader isShowBanner={true} />\r\n                <Specialty settings={settings} />\r\n                <MedicalFacility settings={settings} />\r\n                <OutStandingDoctor settings={settings} />\r\n                <HandBook settings={settings} />\r\n                <About />\r\n                <HomeFooter />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        userInfo: state.user.userInfo,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport moment from 'moment';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport NumberFormat from 'react-number-format';\r\nimport './DoctorInfoBooking.scss';\r\nimport { getProfileDoctorById } from '../../../../services/userService';\r\nimport { LANGUAGES } from '../../../../utils';\r\nimport _ from 'lodash';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass DoctorInfoBooking extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dataProfile: {},\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let data = await this.getInfoDoctor(this.props.doctorId);\r\n        this.setState({\r\n            dataProfile: data,\r\n        });\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.doctorId !== prevProps.doctorId) {\r\n            let data = await this.getInfoDoctor(this.props.doctorId);\r\n            this.setState({\r\n                dataProfile: data,\r\n            });\r\n        }\r\n    }\r\n\r\n    getInfoDoctor = async (id) => {\r\n        let result = {};\r\n        if (id) {\r\n            let res = await getProfileDoctorById(id);\r\n            if (res && res.data.errCode === 0) {\r\n                result = res.data.data;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n    renderTimeBooking = (dataTime) => {\r\n        let { language } = this.props;\r\n        if (dataTime && !_.isEmpty(dataTime)) {\r\n            let time = language === LANGUAGES.VI ? dataTime.valueVi : dataTime.valueEn;\r\n\r\n            let date =\r\n                language === LANGUAGES.VI\r\n                    ? moment.unix(+dataTime.date / 1000).format('dddd - DD/MM/YYYY')\r\n                    : moment\r\n                          .unix(+dataTime.date / 1000)\r\n                          .locale('en')\r\n                          .format('ddd - DD/MM/YYY');\r\n            return (\r\n                <>\r\n                    <div>\r\n                        {time} - {date}\r\n                    </div>\r\n                    <div>\r\n                        <FormattedMessage id=\"patient.booking-modal.priceBooking\" />\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let { dataProfile } = this.state;\r\n        let { language, isShowDescription, dataTime, isShowPrice, isShowLinkDetail, doctorId } =\r\n            this.props;\r\n        let nameVi = '',\r\n            nameEn = '';\r\n        if (dataProfile && dataProfile.positionData) {\r\n            nameVi = `${dataProfile.positionData.valueVi}, ${dataProfile.lastName} ${dataProfile.firstName}`;\r\n            nameEn = `${dataProfile.positionData.valueEn}, ${dataProfile.firstName} ${dataProfile.lastName}`;\r\n        }\r\n        return (\r\n            <div className=\"profile-doctor-container\">\r\n                <div className=\"intro-doctor\">\r\n                    <div\r\n                        className=\"content-left\"\r\n                        style={{\r\n                            backgroundImage: `url(${\r\n                                dataProfile && dataProfile.image ? dataProfile.image : ''\r\n                            })`,\r\n                        }}\r\n                    ></div>\r\n                    <div className=\"content-right\">\r\n                        <Link to={`/profile-doctor/${doctorId}`} className=\"up\">\r\n                            {language === LANGUAGES.VI ? nameVi : nameEn}\r\n                        </Link>\r\n                        <div className=\"down\">\r\n                            {isShowDescription === true ? (\r\n                                <>\r\n                                    {dataProfile &&\r\n                                        dataProfile.Markdown &&\r\n                                        dataProfile.Markdown.description && (\r\n                                            <span>{dataProfile.Markdown.description}</span>\r\n                                        )}\r\n                                </>\r\n                            ) : (\r\n                                <>{this.renderTimeBooking(dataTime)}</>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {isShowLinkDetail === true && (\r\n                    <div className=\"view-detail-doctor\">\r\n                        <Link to={`/profile-doctor/${doctorId}`}>Xem thêm</Link>\r\n                    </div>\r\n                )}\r\n                {isShowPrice && (\r\n                    <div className=\"price\">\r\n                        <FormattedMessage id=\"patient.booking-modal.price\" />\r\n\r\n                        {dataProfile && dataProfile.Doctor_Info && language === LANGUAGES.VI && (\r\n                            <NumberFormat\r\n                                className=\"currency\"\r\n                                value={dataProfile.Doctor_Info.priceTypeData.valueVi}\r\n                                displayType={'text'}\r\n                                thousandSeparator={true}\r\n                                suffix={'VNĐ'}\r\n                            />\r\n                        )}\r\n                        {dataProfile && dataProfile.Doctor_Info && language === LANGUAGES.EN && (\r\n                            <NumberFormat\r\n                                className=\"currency\"\r\n                                value={dataProfile.Doctor_Info.priceTypeData.valueEn}\r\n                                displayType={'text'}\r\n                                thousandSeparator={true}\r\n                                suffix={'$'}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DoctorInfoBooking);\r\n","import React, { Component } from 'react';\r\nimport Flatpickr from 'react-flatpickr';\r\nimport moment from 'moment';\r\n\r\nimport { KeyCodeUtils } from \"../../utils\";\r\nimport './DatePicker.scss';\r\n\r\n// const CustomInput = ({ value, defaultValue, inputRef, onInputChange, onInputBlur, ...props }) => {\r\n//     return <input {...props} className='custom-form-control custom-date-input' defaultValue={defaultValue} ref={inputRef}\r\n//         onChange={onInputChange}\r\n//         onBlur={onInputBlur}\r\n//     />;\r\n// };\r\n\r\nclass DatePicker extends Component {\r\n\r\n    flatpickrNode = null;\r\n\r\n    nodeRef = element => {\r\n        this.flatpickr = element && element.flatpickr;\r\n        this.flatpickrNode = element && element.node;\r\n        if (this.flatpickrNode) {\r\n            this.flatpickrNode.addEventListener('blur', this.handleBlur);\r\n            this.flatpickrNode.addEventListener('keydown', this.handlerKeyDown);\r\n        }\r\n    };\r\n\r\n    handlerKeyDown = (event) => {\r\n        const keyCode = event.which || event.keyCode;\r\n        if (keyCode === KeyCodeUtils.ENTER) {\r\n            event.preventDefault();\r\n            const { onChange } = this.props;\r\n            const value = event.target.value;\r\n\r\n            // Take the blur event and process the string value\r\n            const valueMoment = moment(value, 'DD/MM/YYYY');\r\n            onChange([valueMoment.toDate(), valueMoment.toDate()]);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.flatpickrNode) {\r\n            this.flatpickrNode.removeEventListener('blur', this.handleBlur);\r\n            this.flatpickrNode.removeEventListener('keydown', this.handlerKeyDown);\r\n        }\r\n    }\r\n\r\n    handleBlur = (event) => {\r\n        const { onChange } = this.props;\r\n        const value = event.target.value;\r\n\r\n        // Take the blur event and process the string value\r\n        event.preventDefault();\r\n        const valueMoment = moment(value, 'DD/MM/YYYY');\r\n        onChange([valueMoment.toDate(), valueMoment.toDate()]);\r\n    };\r\n\r\n    onOpen = () => {\r\n        if (this.flatpickrNode) {\r\n            this.flatpickrNode.blur();\r\n        }\r\n    }\r\n\r\n    close() {\r\n        this.flatpickr.close();\r\n    }\r\n\r\n    checkDateValue = (str, max) => {\r\n        if (str.charAt(0) !== '0' || str === '00') {\r\n            var num = parseInt(str);\r\n            if (isNaN(num) || num <= 0 || num > max) num = 1;\r\n            str = num > parseInt(max.toString().charAt(0)) && num.toString().length === 1 ? '0' + num : num.toString();\r\n        };\r\n        return str;\r\n    }\r\n\r\n    // autoFormatonBlur = (value) => {\r\n    //     var input = value;\r\n    //     var values = input.split('/').map(function (v, i) {\r\n    //         return v.replace(/\\D/g, '')\r\n    //     });\r\n    //     var output = '';\r\n\r\n    //     if (values.length == 3) {\r\n    //         var year = values[2].length !== 4 ? parseInt(values[2]) + 2000 : parseInt(values[2]);\r\n    //         var month = parseInt(values[0]) - 1;\r\n    //         var day = parseInt(values[1]);\r\n    //         var d = new Date(year, month, day);\r\n    //         if (!isNaN(d)) {\r\n    //             //document.getElementById('result').innerText = d.toString();\r\n    //             var dates = [d.getMonth() + 1, d.getDate(), d.getFullYear()];\r\n    //             output = dates.map(function (v) {\r\n    //                 v = v.toString();\r\n    //                 return v.length == 1 ? '0' + v : v;\r\n    //             }).join(' / ');\r\n    //         };\r\n    //     };\r\n    //     // this.value = output;\r\n    //     return output;\r\n    // }\r\n\r\n    autoFormatOnChange = (value, seperator) => {\r\n        var input = value;\r\n\r\n        let regexForDeleting = new RegExp(`\\\\D\\\\${seperator}$`);\r\n\r\n        //if (/\\D\\/$/.test(input)) input = input.substr(0, input.length - 3); // dat.nt: Xóa thêm 1 ký tự nếu xóa dấu cách sau / (VD: 12 / 12 /=> 12 / 1)\r\n\r\n        if (regexForDeleting.test(input)) input = input.substr(0, input.length - 3);\r\n\r\n        var values = input.split(seperator).map(function (v) {\r\n            return v.replace(/\\D/g, '')\r\n        });\r\n\r\n        if (values[0]) values[0] = this.checkDateValue(values[0], 31);\r\n        if (values[1]) values[1] = this.checkDateValue(values[1], 12);\r\n        var output = values.map(function (v, i) {\r\n            return v.length === 2 && i < 2 ? v + ' ' + seperator + ' ' : v;\r\n        });\r\n        return output.join('').substr(0, 14);\r\n    }\r\n\r\n    onInputChange = (e) => {\r\n        if (this.DISPLAY_FORMAT === this.DATE_FORMAT_AUTO_FILL) {\r\n            let converted = this.autoFormatOnChange(e.target.value, this.SEPERATOR);\r\n            e.target.value = converted;\r\n        }\r\n    }\r\n\r\n    onInputBlur = (e) => {\r\n    }\r\n\r\n    //dat.nt : Auto Fill cho dạng ngăn cách và format cụ thể (seperator có thể dc thay thế)\r\n    SEPERATOR = \"/\";\r\n    DATE_FORMAT_AUTO_FILL = \"d/m/Y\"; // Format không thay đổi\r\n\r\n    // dat.nt : Format ngày hiển thị\r\n    DISPLAY_FORMAT = \"d/m/Y\";\r\n\r\n    render() {\r\n        const { value, onChange, minDate, onClose, ...otherProps } = this.props;\r\n        const options = {\r\n            dateFormat: this.DISPLAY_FORMAT,\r\n            allowInput: true,\r\n            disableMobile: true,\r\n            onClose: onClose,\r\n            onOpen: this.onOpen\r\n        };\r\n        if (minDate) {\r\n            options.minDate = minDate;\r\n        }\r\n        return (\r\n            <Flatpickr\r\n                ref={this.nodeRef}\r\n                value={value}\r\n                onChange={onChange}\r\n                options={options}\r\n                // render={\r\n                //     ({ defaultValue, value, ...props }, ref) => {\r\n                //         return <CustomInput defaultValue={defaultValue} inputRef={ref} onInputChange={this.onInputChange} onInputBlur={this.onInputBlur} />\r\n                //     }\r\n                // }\r\n                {...otherProps}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default DatePicker;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport moment from 'moment';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { Modal } from 'reactstrap';\r\nimport './BookingModal.scss';\r\nimport _ from 'lodash';\r\nimport DoctorInfoBooking from '../DoctorInfoBooking';\r\nimport DatePicker from '../../../../../components/Input/DatePicker';\r\nimport * as actions from '../../../../../store/actions';\r\nimport { LANGUAGES } from '../../../../../utils';\r\nimport Select from 'react-select';\r\nimport {\r\n    postPatientBookAppointment,\r\n    getDetailDoctorByIdService,\r\n} from '../../../../../services/userService';\r\nimport { toast } from 'react-toastify';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nclass BookingModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            fullName: '',\r\n            phoneNumber: '',\r\n            email: '',\r\n            address: '',\r\n            reason: '',\r\n            birthday: '',\r\n            selectedGender: '',\r\n            doctorId: '',\r\n            genders: [],\r\n            timeType: '',\r\n            isShowLoading: false,\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.props.getGenders();\r\n    }\r\n\r\n    buildDataGender = (data) => {\r\n        let result = [];\r\n        let language = this.props.language;\r\n        if (data && data.length > 0) {\r\n            data.map((item) => {\r\n                let object = {};\r\n                object.label = language === LANGUAGES.VI ? item.valueVi : item.valueEn;\r\n                object.value = item.keyMap;\r\n                result.push(object);\r\n            });\r\n        }\r\n        return result;\r\n    };\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n            this.setState({\r\n                genders: this.buildDataGender(this.props.genders),\r\n            });\r\n        }\r\n        if (this.props.genders !== prevProps.genders) {\r\n            this.setState({\r\n                genders: this.buildDataGender(this.props.genders),\r\n            });\r\n        }\r\n        if (this.props.dataTime !== prevProps.dataTime) {\r\n            if (this.props.dataTime && !_.isEmpty(this.props.dataTime)) {\r\n                let doctorId = this.props.dataTime.doctorId;\r\n                let timeType = this.props.dataTime.keyMap;\r\n                this.setState({\r\n                    doctorId,\r\n                    timeType,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleOnChangeInput = (e, id) => {\r\n        let valueInput = e.target.value;\r\n        let stateCopy = { ...this.state };\r\n        stateCopy[id] = valueInput;\r\n        this.setState({\r\n            ...stateCopy,\r\n        });\r\n    };\r\n\r\n    handleOnchangeDatePicker = (date) => {\r\n        this.setState({\r\n            birthday: date[0],\r\n        });\r\n    };\r\n    handleChangeSelect = (selectedOption) => {\r\n        this.setState({\r\n            selectedGender: selectedOption,\r\n        });\r\n    };\r\n\r\n    handleConfirmBooking = async () => {\r\n        this.setState({\r\n            isShowLoading: true,\r\n        });\r\n        this.props.handleCheckAvailableDay();\r\n        let date = new Date(this.state.birthday).getTime();\r\n        let timeString = this.buildTimeBooking(this.props.dataTime);\r\n        let doctorName = await this.buildDoctorName(this.props.dataTime);\r\n        console.log(doctorName);\r\n        let res = await postPatientBookAppointment({\r\n            fullName: this.state.fullName,\r\n            phoneNumber: this.state.phoneNumber,\r\n            email: this.state.email,\r\n            address: this.state.address,\r\n            reason: this.state.reason,\r\n            date: this.props.dataTime.date,\r\n            birthday: date,\r\n            selectedGender: this.state.selectedGender.value,\r\n            doctorId: this.state.doctorId,\r\n            timeType: this.state.timeType,\r\n            language: this.props.language,\r\n            timeString,\r\n            doctorName,\r\n        });\r\n        this.setState({\r\n            isShowLoading: false,\r\n        });\r\n        if (res && res.data.errCode === 0) {\r\n            toast.success('Booking a new appointment succeed!');\r\n            this.props.closeBookingClose();\r\n        } else {\r\n            toast.error('Booking a new appointment error!');\r\n        }\r\n        let { rangeTime } = this.props;\r\n        if (rangeTime && rangeTime.length > 0) {\r\n            rangeTime = rangeTime.map((item) => {\r\n                if (item.id === this.props.dataTime.id) item.isSelected = true;\r\n                return item;\r\n            });\r\n        }\r\n    };\r\n\r\n    buildTimeBooking = (dataTime) => {\r\n        let { language } = this.props;\r\n        if (dataTime && !_.isEmpty(dataTime)) {\r\n            let time = language === LANGUAGES.VI ? dataTime.valueVi : dataTime.valueEn;\r\n\r\n            let date =\r\n                language === LANGUAGES.VI\r\n                    ? moment.unix(+dataTime.date / 1000).format('dddd - DD/MM/YYYY')\r\n                    : moment\r\n                          .unix(+dataTime.date / 1000)\r\n                          .locale('en')\r\n                          .format('ddd - MM/DD/YYYY');\r\n\r\n            return `${time} - ${date}`;\r\n        }\r\n        return '';\r\n    };\r\n\r\n    buildDoctorName = async (dataTime) => {\r\n        let dataDoctor = await getDetailDoctorByIdService(dataTime.doctorId);\r\n        let { language } = this.props;\r\n        if (dataTime && !_.isEmpty(dataTime)) {\r\n            let name =\r\n                language === LANGUAGES.VI\r\n                    ? `${dataDoctor.data.data.lastName} ${dataDoctor.data.data.firstName}`\r\n                    : `${dataDoctor.data.data.firstName} ${dataDoctor.data.data.lastName}`;\r\n\r\n            console.log(name);\r\n            return name;\r\n        }\r\n        return '';\r\n    };\r\n    render() {\r\n        let { isOpenModal, closeBookingClose, dataTime } = this.props;\r\n        let doctorId = '';\r\n        if (dataTime && !_.isEmpty(dataTime)) {\r\n            doctorId = dataTime.doctorId;\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <LoadingOverlay active={this.state.isShowLoading} spinner text=\"Loading\">\r\n                    <Modal\r\n                        isOpen={isOpenModal}\r\n                        className={'booking-modal-container'}\r\n                        size=\"lg\"\r\n                        centered\r\n                    >\r\n                        <div className=\"booking-modal-content\">\r\n                            <div className=\"booking-modal-header\">\r\n                                <span className=\"left\">\r\n                                    <FormattedMessage id=\"patient.booking-modal.title\" />\r\n                                </span>\r\n                                <span className=\"right\" onClick={closeBookingClose}>\r\n                                    <i className=\"fas fa-times\" />\r\n                                </span>\r\n                            </div>\r\n                            <div className=\"booking-modal-body\">\r\n                                <div className=\"doctor-info\">\r\n                                    <DoctorInfoBooking\r\n                                        doctorId={doctorId}\r\n                                        isShowDescription={false}\r\n                                        dataTime={dataTime}\r\n                                        isShowLinkDetail={false}\r\n                                        isShowPrice={false}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"price\"></div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-6 form-group\">\r\n                                        <label>\r\n                                            <FormattedMessage id=\"patient.booking-modal.fullName\" />\r\n                                        </label>\r\n                                        <input\r\n                                            className=\"form-control\"\r\n                                            value={this.state.fullName}\r\n                                            onChange={(e) =>\r\n                                                this.handleOnChangeInput(e, 'fullName')\r\n                                            }\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"col-6 form-group\">\r\n                                        <label>\r\n                                            <FormattedMessage id=\"patient.booking-modal.phoneNumber\" />\r\n                                        </label>\r\n                                        <input\r\n                                            className=\"form-control\"\r\n                                            value={this.state.phoneNumber}\r\n                                            onChange={(e) =>\r\n                                                this.handleOnChangeInput(e, 'phoneNumber')\r\n                                            }\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"col-6 form-group\">\r\n                                        <label>\r\n                                            <FormattedMessage id=\"patient.booking-modal.email\" />\r\n                                        </label>\r\n                                        <input\r\n                                            className=\"form-control\"\r\n                                            value={this.state.email}\r\n                                            onChange={(e) => this.handleOnChangeInput(e, 'email')}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"col-6 form-group\">\r\n                                        <label>\r\n                                            <FormattedMessage id=\"patient.booking-modal.address\" />\r\n                                        </label>\r\n                                        <input\r\n                                            className=\"form-control\"\r\n                                            value={this.state.address}\r\n                                            onChange={(e) => this.handleOnChangeInput(e, 'address')}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"col-6 form-group\">\r\n                                        <label>\r\n                                            <FormattedMessage id=\"patient.booking-modal.reason\" />\r\n                                        </label>\r\n                                        <input\r\n                                            className=\"form-control\"\r\n                                            value={this.state.reason}\r\n                                            onChange={(e) => this.handleOnChangeInput(e, 'reason')}\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"col-6 form-group\">\r\n                                        <label>\r\n                                            <FormattedMessage id=\"patient.booking-modal.birthday\" />\r\n                                        </label>\r\n                                        <DatePicker\r\n                                            className=\"form-control\"\r\n                                            value={this.state.birthday}\r\n                                            onChange={this.handleOnchangeDatePicker}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"col-6 form-group\">\r\n                                        <label>\r\n                                            <FormattedMessage id=\"patient.booking-modal.gender\" />\r\n                                        </label>\r\n                                        <Select\r\n                                            options={this.state.genders}\r\n                                            value={this.state.selectedGender}\r\n                                            onChange={this.handleChangeSelect}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"booking-modal-footer\">\r\n                                <button\r\n                                    className=\"btn-booking-confirm\"\r\n                                    onClick={() => this.handleConfirmBooking()}\r\n                                >\r\n                                    <FormattedMessage id=\"patient.booking-modal.btnConfirm\" />\r\n                                </button>\r\n                                <button className=\"btn-booking-cancel\" onClick={closeBookingClose}>\r\n                                    <FormattedMessage id=\"patient.booking-modal.btnCancel\" />\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </Modal>\r\n                </LoadingOverlay>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        language: state.app.language,\r\n        genders: state.admin.genders,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getGenders: () => dispatch(actions.fetchGenderStart()),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BookingModal);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport moment from 'moment';\r\nimport './DoctorSchedule.scss';\r\nimport { getScheduleDoctorByDate } from '../../../../services/userService';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { LANGUAGES } from '../../../../utils';\r\nimport BookingModal from './Modal/BookingModal';\r\nimport * as actions from '../../../../store/actions';\r\n\r\nclass DoctorSchedule extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            allDays: [],\r\n            allAvailableTime: [],\r\n            isOpenModal: false,\r\n            dataScheduleTimeModal: {},\r\n            rangeTime: [],\r\n            time: '',\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.props.fetchAllScheduleTime();\r\n        let { language } = this.props;\r\n        let allDays = this.getArrDays(language);\r\n        let data = this.props.allScheduleTime;\r\n\r\n        if (this.props.doctorIdFromParent) {\r\n            let res = await getScheduleDoctorByDate(\r\n                this.props.doctorIdFromParent,\r\n                allDays[0].value,\r\n            );\r\n            this.setState({\r\n                allAvailableTime: res.data.data ? res.data.data : [],\r\n            });\r\n        }\r\n        this.setState({\r\n            allDays,\r\n        });\r\n\r\n        if (data && data.length > 0) {\r\n            data = data.map((item) => ({\r\n                ...item,\r\n                isSelected: false,\r\n                doctorId: this.props.doctorIdFromParent,\r\n                date: allDays[0].value,\r\n            }));\r\n        }\r\n        this.setState({\r\n            rangeTime: data,\r\n        });\r\n        this.handleCheckAvailableDay();\r\n    }\r\n\r\n    capitalizeFirstLetter(string) {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n\r\n    getArrDays = (language) => {\r\n        let allDays = [];\r\n        for (let i = 0; i < 7; i++) {\r\n            let object = {};\r\n            if (language === LANGUAGES.VI) {\r\n                if (i === 0) {\r\n                    let ddMM = moment(new Date()).format('DD/MM');\r\n                    let today = `Hôm nay - ${ddMM}`;\r\n                    object.label = today;\r\n                } else {\r\n                    let labelVi = moment(new Date()).add(i, 'days').format('dddd - DD/MM');\r\n                    object.label = this.capitalizeFirstLetter(labelVi);\r\n                }\r\n            } else {\r\n                if (i === 0) {\r\n                    let ddMM = moment(new Date()).format('DD/MM');\r\n                    let today = `Today - ${ddMM}`;\r\n                    object.label = today;\r\n                } else {\r\n                    object.label = moment(new Date())\r\n                        .add(i, 'days')\r\n                        .locale('en')\r\n                        .format('ddd - DD/MM');\r\n                }\r\n            }\r\n            object.value = moment(new Date()).add(i, 'days').startOf('day').valueOf('day');\r\n            allDays.push(object);\r\n        }\r\n        return allDays;\r\n    };\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n            let allDays = this.getArrDays(this.props.language);\r\n            this.setState({\r\n                allDays,\r\n            });\r\n        }\r\n        if (this.props.doctorIdFromParent !== prevProps.doctorIdFromParent) {\r\n            let allDays = this.getArrDays(this.props.language);\r\n            let res = await getScheduleDoctorByDate(\r\n                this.props.doctorIdFromParent,\r\n                allDays[0].value,\r\n            );\r\n            this.setState({\r\n                allAvailableTime: res.data.data ? res.data.data : [],\r\n            });\r\n        }\r\n        if (prevProps.allScheduleTime !== this.props.allScheduleTime) {\r\n            let data = this.props.allScheduleTime;\r\n            let allDays = this.getArrDays(this.props.language);\r\n\r\n            if (data && data.length > 0) {\r\n                data = data.map((item) => ({\r\n                    ...item,\r\n                    isSelected: false,\r\n                    doctorId: this.props.doctorIdFromParent,\r\n                    date: allDays[0].value,\r\n                }));\r\n            }\r\n            this.setState({\r\n                rangeTime: data,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleOnChangeSelect = async (e) => {\r\n        if (this.props.doctorIdFromParent && this.props.doctorIdFromParent !== -1) {\r\n            let doctorId = this.props.doctorIdFromParent;\r\n            let date = e.target.value;\r\n            let res = await getScheduleDoctorByDate(doctorId, date);\r\n            if (res && res.data.errCode === 0) {\r\n                this.setState({\r\n                    allAvailableTime: res.data.data ? res.data.data : [],\r\n                });\r\n            }\r\n        }\r\n        let data = this.props.allScheduleTime;\r\n\r\n        if (data && data.length > 0) {\r\n            data = data.map((item) => ({\r\n                ...item,\r\n                date: e.target.value,\r\n            }));\r\n        }\r\n        this.setState({\r\n            rangeTime: data,\r\n        });\r\n        this.handleCheckAvailableDay();\r\n    };\r\n\r\n    handleClickScheduleTime = (time) => {\r\n        this.setState({\r\n            isOpenModal: true,\r\n            dataScheduleTimeModal: time,\r\n        });\r\n    };\r\n    handleCheckAvailableDay = () => {\r\n        let rangeTime = this.state.rangeTime;\r\n        let allAvailableTime = this.state.allAvailableTime;\r\n        for (let i = 0; i < rangeTime.length; i++) {\r\n            for (let x = 0; x < allAvailableTime.length; x++) {\r\n                if (rangeTime[i].keyMap === allAvailableTime[x].timeType) {\r\n                    rangeTime.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            rangeTime,\r\n        });\r\n    };\r\n    handleCloseModal = () => {\r\n        this.setState({\r\n            isOpenModal: false,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        let { allDays, isOpenModal, dataScheduleTimeModal, rangeTime } = this.state;\r\n        let { language } = this.props;\r\n        return (\r\n            <>\r\n                <div className=\"doctor-schedule-container\">\r\n                    <div className=\"all-schedule\">\r\n                        <select onChange={(e) => this.handleOnChangeSelect(e)}>\r\n                            {allDays &&\r\n                                allDays.length > 0 &&\r\n                                allDays.map((item, i) => {\r\n                                    return (\r\n                                        <option value={item.value} key={i}>\r\n                                            {item.label}\r\n                                        </option>\r\n                                    );\r\n                                })}\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"all-available-time\">\r\n                        <div className=\"text-calendar\">\r\n                            <i className=\"fas fa-calendar-alt\">\r\n                                <span>\r\n                                    <FormattedMessage id=\"patient.detail-doctor.schedule\" />\r\n                                </span>\r\n                            </i>\r\n                        </div>\r\n                        <div className=\"time-content\">\r\n                            {rangeTime && rangeTime.length > 0 ? (\r\n                                <>\r\n                                    <div className=\"time-content-btns\">\r\n                                        {rangeTime.map((item, i) => {\r\n                                            let timeDisplay =\r\n                                                language === LANGUAGES.VI\r\n                                                    ? item.valueVi\r\n                                                    : item.valueEn;\r\n                                            return (\r\n                                                <button\r\n                                                    key={i}\r\n                                                    className={\r\n                                                        language === LANGUAGES.VI\r\n                                                            ? 'btn-vie'\r\n                                                            : 'btn-en'\r\n                                                    }\r\n                                                    onClick={() =>\r\n                                                        this.handleClickScheduleTime(item)\r\n                                                    }\r\n                                                >\r\n                                                    {timeDisplay}\r\n                                                </button>\r\n                                            );\r\n                                        })}\r\n                                    </div>\r\n                                    <div className=\"book-free\">\r\n                                        <span>\r\n                                            <FormattedMessage id=\"patient.detail-doctor.choose\" />\r\n                                            <i className=\"far fa-hand-point-up\" />\r\n                                            <FormattedMessage id=\"patient.detail-doctor.book-free\" />\r\n                                        </span>\r\n                                    </div>\r\n                                </>\r\n                            ) : (\r\n                                <div className=\"no-schedule\">\r\n                                    <FormattedMessage id=\"patient.detail-doctor.no-schedule\" />\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <BookingModal\r\n                    isOpenModal={isOpenModal}\r\n                    closeBookingClose={this.handleCloseModal}\r\n                    dataTime={dataScheduleTimeModal}\r\n                    rangeTime={rangeTime}\r\n                    handleCheckAvailableDay={this.handleCheckAvailableDay}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        allDoctors: state.admin.allDoctors,\r\n        language: state.app.language,\r\n        allScheduleTime: state.admin.allScheduleTime,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchAllDoctors: () => dispatch(actions.fetchAllDoctors()),\r\n        fetchAllScheduleTime: () => dispatch(actions.fetchAllScheduleTime()),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DoctorSchedule);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './DoctorExtraInfo.scss';\r\nimport { getExtraInfoDoctorByIdService } from '../../../../services/userService';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { LANGUAGES } from '../../../../utils';\r\nimport NumberFormat from 'react-number-format';\r\n\r\nclass DoctorExtraInfo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isShowDetail: false,\r\n            extraInfo: {},\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        if (this.props.doctorIdFromParent) {\r\n            let res = await getExtraInfoDoctorByIdService(this.props.doctorIdFromParent);\r\n            if (res && res.data.errCode === 0) {\r\n                this.setState({\r\n                    extraInfo: res.data.data,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.doctorIdFromParent !== prevProps.doctorIdFromParent) {\r\n            let res = await getExtraInfoDoctorByIdService(this.props.doctorIdFromParent);\r\n            if (res && res.data.errCode === 0) {\r\n                this.setState({\r\n                    extraInfo: res.data.data,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleShowHideDetail = (status) => {\r\n        this.setState({\r\n            isShowDetail: status,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        let { isShowDetail, extraInfo } = this.state;\r\n        let { language } = this.props;\r\n        return (\r\n            <div className=\"doctor-extra-info-container\">\r\n                <div className=\"content-up\">\r\n                    <div className=\"text-address\">\r\n                        <FormattedMessage id=\"patient.extra-info-doctor.text-address\" />\r\n                    </div>\r\n                    <div className=\"name-clinic\">\r\n                        {extraInfo && extraInfo.nameClinic ? extraInfo.nameClinic : ''}\r\n                    </div>\r\n                    <div className=\"detail-address\">\r\n                        {extraInfo && extraInfo.addressClinic ? extraInfo.addressClinic : ''}\r\n                    </div>\r\n                </div>\r\n                <div className=\"content-down\">\r\n                    {isShowDetail === false && (\r\n                        <div className=\"show-info\">\r\n                            <FormattedMessage id=\"patient.extra-info-doctor.price\" />\r\n                            {extraInfo && extraInfo.priceTypeData && language === LANGUAGES.VI && (\r\n                                <NumberFormat\r\n                                    className=\"currency\"\r\n                                    value={extraInfo.priceTypeData.valueVi}\r\n                                    displayType={'text'}\r\n                                    thousandSeparator={true}\r\n                                    suffix={'VNĐ'}\r\n                                />\r\n                            )}\r\n                            {extraInfo && extraInfo.priceTypeData && language === LANGUAGES.EN && (\r\n                                <NumberFormat\r\n                                    className=\"currency\"\r\n                                    value={extraInfo.priceTypeData.valueEn}\r\n                                    displayType={'text'}\r\n                                    thousandSeparator={true}\r\n                                    suffix={'$'}\r\n                                />\r\n                            )}\r\n                            <span\r\n                                className=\"detail\"\r\n                                onClick={() => this.handleShowHideDetail(true)}\r\n                            >\r\n                                <FormattedMessage id=\"patient.extra-info-doctor.detail\" />\r\n                            </span>\r\n                        </div>\r\n                    )}\r\n                    {isShowDetail === true && (\r\n                        <>\r\n                            <div className=\"detail-info\">\r\n                                <div className=\"price\">\r\n                                    <span className=\"left\">\r\n                                        <FormattedMessage id=\"patient.extra-info-doctor.price\" />\r\n                                    </span>\r\n                                    <span className=\"right\">\r\n                                        {extraInfo &&\r\n                                            extraInfo.priceTypeData &&\r\n                                            language === LANGUAGES.VI && (\r\n                                                <NumberFormat\r\n                                                    className=\"currency\"\r\n                                                    value={extraInfo.priceTypeData.valueVi}\r\n                                                    displayType={'text'}\r\n                                                    thousandSeparator={true}\r\n                                                    suffix={'VNĐ'}\r\n                                                />\r\n                                            )}\r\n                                        {extraInfo &&\r\n                                            extraInfo.priceTypeData &&\r\n                                            language === LANGUAGES.EN && (\r\n                                                <NumberFormat\r\n                                                    className=\"currency\"\r\n                                                    value={extraInfo.priceTypeData.valueEn}\r\n                                                    displayType={'text'}\r\n                                                    thousandSeparator={true}\r\n                                                    suffix={'$'}\r\n                                                />\r\n                                            )}\r\n                                    </span>\r\n                                </div>\r\n                                <div className=\"note\">\r\n                                    {extraInfo && extraInfo.note ? extraInfo.note : ''}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"payment\">\r\n                                <FormattedMessage id=\"patient.extra-info-doctor.payment\" />\r\n                                {extraInfo && extraInfo.priceTypeData && language === LANGUAGES.VI\r\n                                    ? extraInfo.paymentTypeData.valueVi\r\n                                    : ''}\r\n                                {extraInfo && extraInfo.priceTypeData && language === LANGUAGES.EN\r\n                                    ? extraInfo.paymentTypeData.valueEn\r\n                                    : ''}\r\n                            </div>\r\n                            <div className=\"hide-price\">\r\n                                <span onClick={() => this.handleShowHideDetail(false)}>\r\n                                    <FormattedMessage id=\"patient.extra-info-doctor.hide-price\" />\r\n                                </span>\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DoctorExtraInfo);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport HomeHeader from '../../../HomePage/HomeHeader';\r\nimport './ProfileDoctor.scss';\r\nimport { getDetailDoctorByIdService } from '../../../../services/userService';\r\nimport { LANGUAGES } from '../../../../utils';\r\nimport DoctorSchedule from './DoctorSchedule';\r\nimport DoctorExtraInfo from './DoctorExtraInfo';\r\n\r\nclass ProfileDoctor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            detailDoctor: {},\r\n            currentDoctorId: -1,\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\r\n            let id = this.props.match.params.id;\r\n            this.setState({\r\n                currentDoctorId: id,\r\n            });\r\n            let res = await getDetailDoctorByIdService(id);\r\n            if (res && res.data.errCode === 0) {\r\n                this.setState({\r\n                    detailDoctor: res.data.data,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {}\r\n\r\n    render() {\r\n        let { language } = this.props;\r\n        let { detailDoctor } = this.state;\r\n        let nameVi = '',\r\n            nameEn = '';\r\n        if (detailDoctor && detailDoctor.positionData) {\r\n            nameVi = `${detailDoctor.positionData.valueVi},${detailDoctor.lastName} ${detailDoctor.firstName}`;\r\n            nameEn = `${detailDoctor.positionData.valueEn},${detailDoctor.firstName} ${detailDoctor.lastName}`;\r\n        }\r\n        return (\r\n            <>\r\n                <HomeHeader isShowBanner={false} />\r\n                <div className=\"doctor-detail-container\">\r\n                    <div className=\"intro-doctor\">\r\n                        <div\r\n                            className=\"content-left\"\r\n                            style={{\r\n                                backgroundImage: `url(${\r\n                                    detailDoctor && detailDoctor.image ? detailDoctor.image : ''\r\n                                })`,\r\n                            }}\r\n                        ></div>\r\n                        <div className=\"content-right\">\r\n                            <div className=\"up\">{language === LANGUAGES.VI ? nameVi : nameEn}</div>\r\n                            <div className=\"down\">\r\n                                {detailDoctor &&\r\n                                    detailDoctor.Markdown &&\r\n                                    detailDoctor.Markdown.description && (\r\n                                        <span>{detailDoctor.Markdown.description}</span>\r\n                                    )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"schedule-doctor\">\r\n                        <div className=\"content-left\">\r\n                            <DoctorSchedule doctorIdFromParent={this.state.currentDoctorId} />\r\n                        </div>\r\n                        <div className=\"content-right\">\r\n                            <DoctorExtraInfo doctorIdFromParent={this.state.currentDoctorId} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"detail-info-doctor\">\r\n                        {detailDoctor &&\r\n                            detailDoctor.Markdown &&\r\n                            detailDoctor.Markdown.contentHTML && (\r\n                                <div\r\n                                    dangerouslySetInnerHTML={{\r\n                                        __html: detailDoctor.Markdown.contentHTML,\r\n                                    }}\r\n                                ></div>\r\n                            )}\r\n                    </div>\r\n                    <div className=\"comment-doctor\"></div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileDoctor);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './ManageSchedule.scss';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport Select from 'react-select';\r\nimport * as actions from '../../../store/actions';\r\nimport { LANGUAGES } from '../../../utils';\r\nimport DatePicker from '../../../components/Input/DatePicker';\r\nimport { toast } from 'react-toastify';\r\nimport _ from 'lodash';\r\nimport { saveBulkScheduleDoctor } from '../../../services/userService';\r\n\r\nclass ManageSchedule extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            lisDoctors: [],\r\n            selectDoctor: {},\r\n            currentDate: '',\r\n            rangeTime: [],\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.props.fetchAllDoctors();\r\n        this.props.fetchAllScheduleTime();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.allDoctors !== this.props.allDoctors) {\r\n            let dataSelect = this.buildDataInputSelect(this.props.allDoctors);\r\n            this.setState({\r\n                lisDoctors: dataSelect,\r\n            });\r\n        }\r\n        if (prevProps.allScheduleTime !== this.props.allScheduleTime) {\r\n            let data = this.props.allScheduleTime;\r\n            if (data && data.length > 0) {\r\n                data = data.map((item) => ({ ...item, isSelected: false }));\r\n            }\r\n            this.setState({\r\n                rangeTime: data,\r\n            });\r\n        }\r\n    }\r\n\r\n    buildDataInputSelect = (inputData) => {\r\n        let result = [];\r\n        let { language } = this.props;\r\n        if (inputData && inputData.length > 0) {\r\n            inputData.map((item, i) => {\r\n                let object = {};\r\n                let labelVi = `${item.lastName} ${item.firstName}`;\r\n                let labelEn = `${item.firstName} ${item.lastName}`;\r\n                object.label = language === LANGUAGES.VI ? labelVi : labelEn;\r\n                object.value = item.id;\r\n                result.push(object);\r\n            });\r\n        }\r\n        return result;\r\n    };\r\n\r\n    handleChangeSelect = async (selectedOption) => {\r\n        await this.setState({\r\n            selectDoctor: selectedOption,\r\n        });\r\n    };\r\n    handleOnChangeDatePicker = (date) => {\r\n        this.setState({\r\n            currentDate: date[0],\r\n        });\r\n    };\r\n\r\n    handleClickBtnTime = (time) => {\r\n        let { rangeTime } = this.state;\r\n        if (rangeTime && rangeTime.length > 0) {\r\n            rangeTime = rangeTime.map((item) => {\r\n                if (item.id === time.id) item.isSelected = !item.isSelected;\r\n                return item;\r\n            });\r\n            this.setState({\r\n                rangeTime,\r\n            });\r\n        }\r\n    };\r\n    handleSaveSchedule = async () => {\r\n        let { rangeTime, selectDoctor, currentDate } = this.state;\r\n        let result = [];\r\n        if (selectDoctor && _.isEmpty(selectDoctor)) {\r\n            toast.error('Invalid selected doctor!');\r\n            return;\r\n        }\r\n        if (!currentDate) {\r\n            toast.error('Invalid date!');\r\n            return;\r\n        }\r\n        let formatDate = new Date(currentDate).getTime();\r\n        if (rangeTime && rangeTime.length > 0) {\r\n            let selectedTime = rangeTime.filter((item) => item.isSelected === true);\r\n            if (selectedTime && selectedTime.length > 0) {\r\n                selectedTime.map((schedule, i) => {\r\n                    let object = {};\r\n                    object.doctorId = selectDoctor.value;\r\n                    object.date = formatDate;\r\n                    object.timeType = schedule.keyMap;\r\n                    result.push(object);\r\n                });\r\n            } else {\r\n                toast.error('Invalid selected time!');\r\n                return;\r\n            }\r\n        }\r\n        let res = await saveBulkScheduleDoctor({\r\n            arrSchedule: result,\r\n            doctorId: selectDoctor.value,\r\n            formatDate,\r\n        });\r\n\r\n        if (res && res.data.errCode === 0) {\r\n            toast.success('save info succeed');\r\n        } else {\r\n            toast.error('fail save info succeed');\r\n        }\r\n    };\r\n    render() {\r\n        let { rangeTime } = this.state;\r\n        let { language } = this.props;\r\n        let yesterday = new Date(new Date().setDate(new Date().getDate() - 1));\r\n        return (\r\n            <div className=\"manage-schedule-container\">\r\n                <div className=\"m-s-title\">\r\n                    <FormattedMessage id=\"manage-schedule.title\" />\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 form-group\">\r\n                            <label>\r\n                                {' '}\r\n                                <FormattedMessage id=\"manage-schedule.choose-doctor\" />{' '}\r\n                            </label>\r\n                            <Select\r\n                                value={this.state.selectDoctor}\r\n                                onChange={this.handleChangeSelect}\r\n                                options={this.state.lisDoctors}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-6 form-group\">\r\n                            <label>\r\n                                <FormattedMessage id=\"manage-schedule.choose-date\" />{' '}\r\n                            </label>\r\n                            <DatePicker\r\n                                onChange={this.handleOnChangeDatePicker}\r\n                                className=\"form-control\"\r\n                                value={this.state.currentDate}\r\n                                minDate={yesterday}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 pick-hour-container\">\r\n                            {rangeTime &&\r\n                                rangeTime.length > 0 &&\r\n                                rangeTime.map((item, i) => {\r\n                                    return (\r\n                                        <button\r\n                                            className={\r\n                                                item.isSelected === true\r\n                                                    ? 'btn btn-schedule active'\r\n                                                    : 'btn btn-schedule'\r\n                                            }\r\n                                            key={i}\r\n                                            onClick={() => this.handleClickBtnTime(item)}\r\n                                        >\r\n                                            {language === LANGUAGES.VI\r\n                                                ? item.valueVi\r\n                                                : item.valueEn}\r\n                                        </button>\r\n                                    );\r\n                                })}\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                            <button\r\n                                className=\"btn btn-primary btn-save-schedule\"\r\n                                onClick={() => this.handleSaveSchedule()}\r\n                            >\r\n                                <FormattedMessage id=\"manage-schedule.save\" />{' '}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        allDoctors: state.admin.allDoctors,\r\n        language: state.app.language,\r\n        allScheduleTime: state.admin.allScheduleTime,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchAllDoctors: () => dispatch(actions.fetchAllDoctors()),\r\n        fetchAllScheduleTime: () => dispatch(actions.fetchAllScheduleTime()),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageSchedule);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Modal, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { CommonUtils } from '../../../utils';\r\n\r\nclass RemedyModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            imgBase64: '',\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        if (this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email,\r\n            });\r\n        }\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.dataModal !== prevProps.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleOnchangeEmail = (e) => {\r\n        this.setState({\r\n            email: e.target.value,\r\n        });\r\n    };\r\n\r\n    handleOnchangeImage = async (e) => {\r\n        let data = e.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            this.setState({\r\n                imgBase64: base64,\r\n            });\r\n        }\r\n    };\r\n\r\n    handleSendRemedy = () => {\r\n        this.props.sendRemedy(this.state);\r\n    };\r\n    render() {\r\n        let { isOpenModal, closeRemedyModal } = this.props;\r\n        return (\r\n            <Modal isOpen={isOpenModal} className=\"booking-modal-container\" size=\"md\" centered>\r\n                <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\">Gửi hóa đơn khám bệnh thành công</h5>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"close\"\r\n                        aria-label=\"close\"\r\n                        onClick={closeRemedyModal}\r\n                    >\r\n                        <span aria-hidden=\"true\">x</span>\r\n                    </button>\r\n                </div>\r\n                <ModalBody>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 form-group\">\r\n                            <label>Email bệnh nhân</label>\r\n                            <input\r\n                                className=\"form-control\"\r\n                                type=\"email\"\r\n                                value={this.state.email}\r\n                                onChange={(e) => this.handleOnchangeEmail(e)}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-6 form-group\">\r\n                            <label>Chọn file đơn thuốc</label>\r\n                            <input\r\n                                className=\"form-control\"\r\n                                type=\"file\"\r\n                                onChange={(e) => this.handleOnchangeImage(e)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" onClick={() => this.handleSendRemedy()}>\r\n                        Send\r\n                    </Button>\r\n                    <Button color=\"secondary\" onClick={closeRemedyModal}>\r\n                        Cancel\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RemedyModal);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './ManagePatient.scss';\r\nimport DatePicker from '../../../components/Input/DatePicker';\r\nimport moment from 'moment/moment';\r\nimport { toast } from 'react-toastify';\r\nimport _ from 'lodash';\r\nimport { getAllPatientForDoctor, postSendRemedy } from '../../../services/userService';\r\nimport RemedyModal from './RemedyModal';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nclass ManagePatient extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentDate: moment(new Date()).startOf('day').valueOf(),\r\n            dataPatient: [],\r\n            isOpenModal: false,\r\n            dataModal: {},\r\n            isShowLoading: false,\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.getDataPatient();\r\n    }\r\n\r\n    getDataPatient = async () => {\r\n        let { user } = this.props;\r\n        let { currentDate } = this.state;\r\n        let formatDate = new Date(currentDate).getTime();\r\n        let res = await getAllPatientForDoctor({\r\n            doctorId: user.id,\r\n            date: formatDate,\r\n        });\r\n        if (res && res.data.errCode === 0) {\r\n            this.setState({\r\n                dataPatient: res.data.data,\r\n            });\r\n        }\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {}\r\n\r\n    handleOnChangeDatePicker = (date) => {\r\n        this.setState(\r\n            {\r\n                currentDate: date[0],\r\n            },\r\n            async () => {\r\n                await this.getDataPatient();\r\n            },\r\n        );\r\n    };\r\n\r\n    handleBtnConfirm = (item) => {\r\n        let data = {\r\n            doctorId: item.doctorId,\r\n            patientId: item.patientId,\r\n            email: item.patientData.email,\r\n            timeType: item.timeType,\r\n            patientName: item.patientData.firstName,\r\n            date: item.date,\r\n        };\r\n        console.log(item);\r\n        this.setState({\r\n            isOpenModal: true,\r\n            dataModal: data,\r\n        });\r\n    };\r\n\r\n    closeRemedyModal = () => {\r\n        this.setState({\r\n            isOpenModal: false,\r\n            dataModal: {},\r\n        });\r\n    };\r\n\r\n    sendRemedy = async (dataChild) => {\r\n        let { dataModal } = this.state;\r\n        this.setState({\r\n            isShowLoading: true,\r\n        });\r\n\r\n        let res = await postSendRemedy({\r\n            email: dataChild.email,\r\n            imgBase64: dataChild.imgBase64,\r\n            doctorId: dataModal.doctorId,\r\n            patientId: dataModal.patientId,\r\n            timeType: dataModal.timeType,\r\n            date: dataModal.date,\r\n            language: this.props.language,\r\n            patientName: dataModal.patientName,\r\n        });\r\n        if (res && res.data.errCode === 0) {\r\n            this.setState({\r\n                isShowLoading: false,\r\n            });\r\n            toast.success('Send Remedy succeeds');\r\n            this.closeRemedyModal();\r\n            await this.getDataPatient();\r\n        } else {\r\n            this.setState({\r\n                isShowLoading: false,\r\n            });\r\n            toast.error('Something wrongs ...');\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let { dataPatient, isOpenModal, dataModal } = this.state;\r\n        return (\r\n            <>\r\n                <LoadingOverlay active={this.state.isShowLoading} spinner text=\"Loading\">\r\n                    <div className=\"manage-patient-container\">\r\n                        <div className=\"m-p-title\">Quản lí bệnh nhân</div>\r\n                        <div className=\"manage-patient-body row\">\r\n                            <div className=\"col-4 form-group\">\r\n                                <label>Chọn ngày khám</label>\r\n                                <DatePicker\r\n                                    onChange={this.handleOnChangeDatePicker}\r\n                                    className=\"form-control\"\r\n                                    value={this.state.currentDate}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-12 table-manage-patient\">\r\n                                <table style={{ width: '100%' }}>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <th>STT</th>\r\n                                            <th>Thời gian</th>\r\n                                            <th>Học và tên</th>\r\n                                            <th>Địa chỉ</th>\r\n                                            <th>Giới tính</th>\r\n                                            <th>Actions</th>\r\n                                        </tr>\r\n\r\n                                        {dataPatient && dataPatient.length > 0 ? (\r\n                                            dataPatient.map((item, i) => {\r\n                                                return (\r\n                                                    <tr key={i}>\r\n                                                        <td>{i + 1}</td>\r\n                                                        <td>{item.timeTypeDataPatient.valueVi}</td>\r\n                                                        <td>{item.patientData.firstName}</td>\r\n                                                        <td>{item.patientData.address}</td>\r\n                                                        <td>\r\n                                                            {item.patientData.genderData.valueVi}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            <button\r\n                                                                className=\"mp-btn-confirm\"\r\n                                                                onClick={() =>\r\n                                                                    this.handleBtnConfirm(item)\r\n                                                                }\r\n                                                            >\r\n                                                                Xác nhận\r\n                                                            </button>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                );\r\n                                            })\r\n                                        ) : (\r\n                                            <tr>no data</tr>\r\n                                        )}\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <RemedyModal\r\n                        isOpenModal={isOpenModal}\r\n                        dataModal={dataModal}\r\n                        closeRemedyModal={this.closeRemedyModal}\r\n                        sendRemedy={this.sendRemedy}\r\n                    />\r\n                </LoadingOverlay>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        allDoctors: state.admin.allDoctors,\r\n        user: state.user.userInfo,\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManagePatient);\r\n","import React, { Component } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport ManageSchedule from '../containers/System/Doctor/ManageSchedule';\r\nimport Header from '../containers/Header/Header';\r\nimport ManagePatient from '../containers/System/Doctor/ManagePatient';\r\n\r\nclass Doctor extends Component {\r\n    render() {\r\n        const { isLoggedIn } = this.props;\r\n        return (\r\n            <>\r\n                {isLoggedIn && <Header />}\r\n                <div className=\"system-container\">\r\n                    <div className=\"system-list\">\r\n                        <Switch>\r\n                            <Route path=\"/doctor/manage-schedule\" component={ManageSchedule} />\r\n                            <Route path=\"/doctor/manage-patient\" component={ManagePatient} />\r\n                        </Switch>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Doctor);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './verifyEmail.scss';\r\nimport HomeHeader from '../HomeHeader';\r\nimport { postVerifyBookAppointment } from '../../../services/userService';\r\n\r\nclass verifyEmail extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            statusVerify: false,\r\n            errCode: 0,\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        if (this.props.location && this.props.location.search) {\r\n            let urlParams = new URLSearchParams(this.props.location.search);\r\n            let token = urlParams.get('token');\r\n            let doctorId = urlParams.get('doctorId');\r\n            let res = await postVerifyBookAppointment({\r\n                token,\r\n                doctorId,\r\n            });\r\n\r\n            if (res && res.data.errCode === 0) {\r\n                this.setState({\r\n                    statusVerify: true,\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    statusVerify: true,\r\n                    errCode: res && res.data.errCode ? res.data.errCode : -1,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {}\r\n\r\n    render() {\r\n        let { statusVerify, errCode } = this.state;\r\n        return (\r\n            <>\r\n                <HomeHeader />\r\n                <div className=\"verify-email-container\">\r\n                    {statusVerify === false ? (\r\n                        <div>Loading data ...</div>\r\n                    ) : (\r\n                        <div>\r\n                            {+errCode === 0 ? (\r\n                                <div className=\"info-booking\">Xác nhận lịch hẹn thành công</div>\r\n                            ) : (\r\n                                <div className=\"info-booking\">\r\n                                    Lịch hẹn không tồn tại hoặc đã được xác nhận\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(verifyEmail);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport HomeHeader from '../../HomeHeader';\r\nimport './DetailSpecialty.scss';\r\nimport DoctorSchedule from '../Doctor/DoctorSchedule';\r\nimport DoctorExtraInfo from '../Doctor/DoctorExtraInfo';\r\nimport DoctorInfoBooking from '../Doctor/DoctorInfoBooking';\r\nimport { getDetailSpecialtyById, getAllCodeService } from '../../../../services/userService';\r\nimport _ from 'lodash';\r\nimport { LANGUAGES } from '../../../../utils';\r\n\r\nclass DetailSpecialty extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arrDoctorId: [],\r\n            dataDetailSpecialty: {},\r\n            listProvince: [],\r\n        };\r\n    }\r\n    async componentDidMount() {\r\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\r\n            let id = this.props.match.params.id;\r\n            let res = await getDetailSpecialtyById({\r\n                id,\r\n                location: 'ALL',\r\n            });\r\n\r\n            let resProvince = await getAllCodeService('PROVINCE');\r\n            if (res && res.data.errCode === 0 && resProvince.data.errCode === 0) {\r\n                let data = res.data.data;\r\n                let arrDoctorId = [];\r\n                if (data && !_.isEmpty(res.data.data)) {\r\n                    let arr = data.doctorSpecialty;\r\n                    if (arr && arr.length > 0) {\r\n                        arr.map((item) => {\r\n                            arrDoctorId.push(item.doctorId);\r\n                        });\r\n                    }\r\n                }\r\n\r\n                let dataProvince = resProvince.data.data;\r\n                if (dataProvince && dataProvince.length > 0) {\r\n                    dataProvince.unshift({\r\n                        createdAt: null,\r\n                        keyMap: 'ALL',\r\n                        type: 'PROVINCE',\r\n                        valueEn: 'ALL',\r\n                        valueVi: 'Toàn quốc',\r\n                    });\r\n                }\r\n\r\n                this.setState({\r\n                    dataDetailSpecialty: res.data.data,\r\n                    arrDoctorId,\r\n                    listProvince: dataProvince ? dataProvince : [],\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {}\r\n\r\n    handleOnChangeSelect = async (e) => {\r\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\r\n            let id = this.props.match.params.id;\r\n            let location = e.target.value;\r\n            let res = await getDetailSpecialtyById({\r\n                id,\r\n                location,\r\n            });\r\n\r\n            if (res && res.data.errCode === 0) {\r\n                let data = res.data.data;\r\n                let arrDoctorId = [];\r\n                if (data && !_.isEmpty(res.data.data)) {\r\n                    let arr = data.doctorSpecialty;\r\n                    if (arr && arr.length > 0) {\r\n                        arr.map((item) => {\r\n                            arrDoctorId.push(item.doctorId);\r\n                        });\r\n                    }\r\n                }\r\n\r\n                this.setState({\r\n                    dataDetailSpecialty: res.data.data,\r\n                    arrDoctorId,\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let { arrDoctorId, dataDetailSpecialty, listProvince } = this.state;\r\n        let { language } = this.props;\r\n\r\n        return (\r\n            <div className=\"detail-specialty-container\">\r\n                <HomeHeader />\r\n                <div className=\"detail-specialty-body\">\r\n                    <div className=\"description-specialty\">\r\n                        {dataDetailSpecialty && !_.isEmpty(dataDetailSpecialty) && (\r\n                            <div\r\n                                dangerouslySetInnerHTML={{\r\n                                    __html: dataDetailSpecialty.data.descriptionHTML,\r\n                                }}\r\n                            ></div>\r\n                        )}\r\n                    </div>\r\n                    <div className=\"search-sp-doctor\">\r\n                        <select\r\n                            onChange={(e) => {\r\n                                this.handleOnChangeSelect(e);\r\n                            }}\r\n                        >\r\n                            {listProvince &&\r\n                                listProvince.length > 0 &&\r\n                                listProvince.map((item, i) => {\r\n                                    return (\r\n                                        <option key={i} value={item.keyMap}>\r\n                                            {language === LANGUAGES.VI\r\n                                                ? item.valueVi\r\n                                                : item.valueEn}\r\n                                        </option>\r\n                                    );\r\n                                })}\r\n                        </select>\r\n                    </div>\r\n                    {arrDoctorId &&\r\n                        arrDoctorId.length > 0 &&\r\n                        arrDoctorId.map((item, i) => {\r\n                            return (\r\n                                <div className=\"each-doctor\" key={i}>\r\n                                    <div className=\"dt-content-left\">\r\n                                        <div className=\"profile-doctor\">\r\n                                            <DoctorInfoBooking\r\n                                                doctorId={item}\r\n                                                isShowDescription={true}\r\n                                                isShowLinkDetail={true}\r\n                                                isShowPrice={false}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"dt-content-right\">\r\n                                        <div className=\"doctor-schedule\">\r\n                                            <DoctorSchedule doctorIdFromParent={item} />\r\n                                        </div>\r\n                                        <div className=\"doctor-extra-info\">\r\n                                            <DoctorExtraInfo doctorIdFromParent={item} />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailSpecialty);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport HomeHeader from '../../HomeHeader';\r\nimport './DetailClinic.scss';\r\nimport DoctorSchedule from '../Doctor/DoctorSchedule';\r\nimport DoctorExtraInfo from '../Doctor/DoctorExtraInfo';\r\nimport DoctorInfoBooking from '../Doctor/DoctorInfoBooking';\r\nimport { getDetailClinicById, getAllCodeService } from '../../../../services/userService';\r\nimport _ from 'lodash';\r\n\r\nclass DetailClinic extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arrDoctorId: [],\r\n            dataDetailSpecialty: {},\r\n        };\r\n    }\r\n    async componentDidMount() {\r\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\r\n            let id = this.props.match.params.id;\r\n            let res = await getDetailClinicById({\r\n                id,\r\n            });\r\n\r\n            if (res && res.data.errCode === 0) {\r\n                let data = res.data.data;\r\n                let arrDoctorId = [];\r\n                if (data && !_.isEmpty(res.data.data)) {\r\n                    let arr = data.doctorClinic;\r\n                    if (arr && arr.length > 0) {\r\n                        arr.map((item) => {\r\n                            arrDoctorId.push(item.doctorId);\r\n                        });\r\n                    }\r\n                }\r\n\r\n                this.setState({\r\n                    dataDetailSpecialty: res.data.data,\r\n                    arrDoctorId,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n        }\r\n    }\r\n\r\n    handleOnChangeSelect = async (e) => {\r\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\r\n            let id = this.props.match.params.id;\r\n            let res = await getDetailClinicById({\r\n                id,\r\n            });\r\n\r\n            if (res && res.data.errCode === 0) {\r\n                let data = res.data.data;\r\n                let arrDoctorId = [];\r\n                if (data && !_.isEmpty(res.data.data)) {\r\n                    let arr = data.doctorClinic;\r\n                    if (arr && arr.length > 0) {\r\n                        arr.map((item) => {\r\n                            arrDoctorId.push(item.doctorId);\r\n                        });\r\n                    }\r\n                }\r\n\r\n                this.setState({\r\n                    dataDetailSpecialty: res.data.data,\r\n                    arrDoctorId,\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let { arrDoctorId, dataDetailSpecialty, listProvince } = this.state;\r\n\r\n        return (\r\n            <div className=\"detail-specialty-container\">\r\n                <HomeHeader />\r\n                <div className=\"detail-specialty-body\">\r\n                    {arrDoctorId &&\r\n                        arrDoctorId.length > 0 &&\r\n                        arrDoctorId.map((item, i) => {\r\n                            return (\r\n                                <div className=\"each-doctor\" key={i}>\r\n                                    <div className=\"dt-content-left\">\r\n                                        <div className=\"profile-doctor\">\r\n                                            <DoctorInfoBooking\r\n                                                doctorId={item}\r\n                                                isShowDescription={true}\r\n                                                isShowLinkDetail={true}\r\n                                                isShowPrice={false}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"dt-content-right\">\r\n                                        <div className=\"doctor-schedule\">\r\n                                            <DoctorSchedule doctorIdFromParent={item} />\r\n                                        </div>\r\n                                        <div className=\"doctor-extra-info\">\r\n                                            <DoctorExtraInfo doctorIdFromParent={item} />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    <div className=\"description-specialty\">\r\n                        {dataDetailSpecialty && !_.isEmpty(dataDetailSpecialty) && (\r\n                            <div\r\n                                dangerouslySetInnerHTML={{\r\n                                    __html: dataDetailSpecialty.data.descriptionHTML,\r\n                                }}\r\n                            ></div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailClinic);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport HomeHeader from '../../HomeHeader';\r\nimport { getAllClinic } from '../../../../services/userService';\r\nimport './AllClinic.scss';\r\n\r\nclass AllClinic extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dataClinics: [],\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let res = await getAllClinic();\r\n        if (res && res.data.errCode === 0) {\r\n            this.setState({\r\n                dataClinics: res.data.data ? res.data.data : [],\r\n            });\r\n        }\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n        }\r\n    }\r\n    handleViewDetailClinic = (item) => {\r\n        if (this.props.history) {\r\n            this.props.history.push(`/detail-clinic/${item.id}`);\r\n        }\r\n    };\r\n    render() {\r\n        let { dataClinics } = this.state;\r\n        return (\r\n            <>\r\n                <HomeHeader isShowBanner={false} />\r\n                <div className=\"all-clinic-container\">\r\n                    {dataClinics &&\r\n                        dataClinics.length > 0 &&\r\n                        dataClinics.map((item, i) => {\r\n                            return (\r\n                                <div\r\n                                    className=\"section-customize clinic-child\"\r\n                                    key={i}\r\n                                    onClick={() => this.handleViewDetailClinic(item)}\r\n                                >\r\n                                    <div className=\"outer-bg\">\r\n                                        <div\r\n                                            className=\"bg-image section-medical-facility\"\r\n                                            style={{ backgroundImage: `url(${item.image})` }}\r\n                                        />\r\n                                        <div className=\"clinic-name\">{item.name}</div>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AllClinic);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport HomeHeader from '../../HomeHeader';\r\nimport { getAllSpecialty } from '../../../../services/userService';\r\nimport './AllSpecialty.scss';\r\n\r\nclass AllSpecialty extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dataSpecialty: [],\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let res = await getAllSpecialty();\r\n        if (res && res.data.errCode === 0) {\r\n            this.setState({\r\n                dataSpecialty: res.data.data ? res.data.data : [],\r\n            });\r\n        }\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n        }\r\n    }\r\n    handleViewDetailSpecialty = (item) => {\r\n        if (this.props.history) {\r\n            this.props.history.push(`/detail-specialty/${item.id}`);\r\n        }\r\n    };\r\n    render() {\r\n        let { dataSpecialty } = this.state;\r\n        return (\r\n            <>\r\n                <HomeHeader isShowBanner={false} />\r\n                <div className=\"all-specialty-container\">\r\n                    {dataSpecialty &&\r\n                        dataSpecialty.length > 0 &&\r\n                        dataSpecialty.map((item, i) => {\r\n                            return (\r\n                                <div\r\n                                    className=\"section-customize specialty-child\"\r\n                                    key={i}\r\n                                    onClick={() => this.handleViewDetailSpecialty(item)}\r\n                                >\r\n                                    <div className=\"outer-bg\">\r\n                                        <div\r\n                                            className=\"bg-image section-specialty\"\r\n                                            style={{ backgroundImage: `url(${item.image})` }}\r\n                                        />\r\n                                        <div className=\"specialty-name\">{item.name}</div>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AllSpecialty);\r\n","import React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { ConnectedRouter as Router } from 'connected-react-router';\r\nimport { history } from '../redux';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { userIsAuthenticated, userIsNotAuthenticated } from '../hoc/authentication';\r\nimport { path } from '../utils';\r\nimport Home from '../routes/Home';\r\nimport Login from './Auth/Login';\r\nimport System from '../routes/System';\r\nimport HomePage from './HomePage/HomePage.js';\r\nimport ProfileDoctor from './HomePage/Patient/Doctor/ProfileDoctor';\r\nimport CustomScrollbars from '../components/CustomScrollbars';\r\nimport Doctor from '../routes/Doctor';\r\nimport VerifyEmail from './HomePage/Patient/verifyEmail';\r\nimport DetailSpecialty from './HomePage/Patient/Specialty/DetailSpecialty';\r\nimport DetailClinic from './HomePage/Patient/Clinic/DetailClinic';\r\nimport AllDoctor from './HomePage/Patient/Doctor/AllDoctor';\r\nimport AllClinic from './HomePage/Patient/Clinic/AllClinic';\r\nimport AllSpecialty from './HomePage/Patient/Specialty/AllSpecialty';\r\n\r\n// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getAnalytics } from 'firebase/analytics';\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: 'AIzaSyCRxi99ewvJXJ4P0UMR8zkXXahxLIX3vOI',\r\n    authDomain: 'tanth-bookingcare.firebaseapp.com',\r\n    projectId: 'tanth-bookingcare',\r\n    storageBucket: 'tanth-bookingcare.appspot.com',\r\n    messagingSenderId: '394018197952',\r\n    appId: '1:394018197952:web:e8e0806c6fbd455d36f825',\r\n    measurementId: 'G-5JCRBTDVNL',\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst analytics = getAnalytics(app);\r\n\r\nclass App extends Component {\r\n    handlePersistorState = () => {\r\n        const { persistor } = this.props;\r\n        let { bootstrapped } = persistor.getState();\r\n        if (bootstrapped) {\r\n            if (this.props.onBeforeLift) {\r\n                Promise.resolve(this.props.onBeforeLift())\r\n                    .then(() => this.setState({ bootstrapped: true }))\r\n                    .catch(() => this.setState({ bootstrapped: true }));\r\n            } else {\r\n                this.setState({ bootstrapped: true });\r\n            }\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.handlePersistorState();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Router history={history}>\r\n                    <div className=\"main-container\">\r\n                        <div className=\"content-container\">\r\n                            <CustomScrollbars style={{ height: '100vh', width: '100%' }}>\r\n                                <Switch>\r\n                                    <Route path={path.HOME} exact component={Home} />\r\n                                    <Route\r\n                                        path={path.LOGIN}\r\n                                        component={userIsNotAuthenticated(Login)}\r\n                                    />\r\n                                    <Route\r\n                                        path={path.SYSTEM}\r\n                                        component={userIsAuthenticated(System)}\r\n                                    />\r\n                                    <Route\r\n                                        path={path.DOCTOR}\r\n                                        component={userIsAuthenticated(Doctor)}\r\n                                    />\r\n\r\n                                    <Route path={path.HOMEPAGE} component={HomePage} />\r\n                                    <Route path={path.PROFILE_DOCTOR} component={ProfileDoctor} />\r\n                                    <Route\r\n                                        path={path.DETAIL_SPECIALTY}\r\n                                        component={DetailSpecialty}\r\n                                    />\r\n                                    <Route path={path.DETAIL_CLINIC} component={DetailClinic} />\r\n                                    <Route path={path.ALL_DOCTOR} component={AllDoctor} />\r\n                                    <Route path={path.ALL_CLINIC} component={AllClinic} />\r\n                                    <Route path={path.ALL_SPECIALTY} component={AllSpecialty} />\r\n                                    <Route\r\n                                        path={path.VERIFY_EMAIL_BOOKING}\r\n                                        component={VerifyEmail}\r\n                                    />\r\n                                </Switch>\r\n                            </CustomScrollbars>\r\n                        </div>\r\n\r\n                        <ToastContainer\r\n                            position=\"top-right\"\r\n                            autoClose={4000}\r\n                            hideProgressBar={false}\r\n                            newestOnTop={false}\r\n                            closeOnClick\r\n                            rtl={false}\r\n                            pauseOnFocusLoss\r\n                            draggable\r\n                            pauseOnHover\r\n                        />\r\n                    </div>\r\n                </Router>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        started: state.app.started,\r\n        isLoggedIn: state.user.isLoggedIn,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { IntlProvider } from \"react-intl\";\r\n\r\nimport '@formatjs/intl-pluralrules/polyfill';\r\nimport '@formatjs/intl-pluralrules/locale-data/en';\r\nimport '@formatjs/intl-pluralrules/locale-data/vi';\r\n\r\nimport '@formatjs/intl-relativetimeformat/polyfill';\r\nimport '@formatjs/intl-relativetimeformat/locale-data/en';\r\nimport '@formatjs/intl-relativetimeformat/locale-data/vi';\r\n\r\nimport { LanguageUtils } from '../utils'\r\n\r\nconst messages = LanguageUtils.getFlattenedMessages();\r\n\r\nclass IntlProviderWrapper extends Component {\r\n\r\n    render() {\r\n        const { children, language } = this.props;\r\n        return (\r\n            <IntlProvider\r\n                locale={language}\r\n                messages={messages[language]}\r\n                defaultLocale=\"vi\">\r\n                {children}\r\n            </IntlProvider>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(IntlProviderWrapper);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './styles/styles.scss';\r\n\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport IntlProviderWrapper from \"./hoc/IntlProviderWrapper\";\r\n\r\n\r\nimport { Provider } from 'react-redux';\r\nimport reduxStore, { persistor } from './redux';\r\n\r\nconst renderApp = () => {\r\n    ReactDOM.render(\r\n        <Provider store={reduxStore}>\r\n            <IntlProviderWrapper>\r\n                <App persistor={persistor}/>\r\n            </IntlProviderWrapper>\r\n        </Provider>,\r\n        document.getElementById('root')\r\n    );\r\n};\r\n\r\nrenderApp();\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './HomeHeader.scss';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { LANGUAGES } from '../../utils';\r\nimport { changeLanguageApp } from '../../store/actions';\r\nimport { withRouter } from 'react-router';\r\n\r\nclass HomeHeader extends Component {\r\n    handleChangeLanguage = (language, isShowBanner) => {\r\n        this.props.changeLanguageAppRedux(language);\r\n    };\r\n    returnHome = () => {\r\n        if (this.props.history) {\r\n            this.props.history.push(`/home`);\r\n        }\r\n    };\r\n    render() {\r\n        let language = this.props.language;\r\n        return (\r\n            <>\r\n                <div className=\"home-header-container\">\r\n                    <div className=\"home-header-content\">\r\n                        <div className=\"left-content\">\r\n                            <div className=\"header-logo\" onClick={() => this.returnHome()}></div>\r\n                        </div>\r\n                        <div className=\"center-content\">\r\n                            <div className=\"child-content\">\r\n                                <div>\r\n                                    <b>\r\n                                        <FormattedMessage id=\"home-header.speciality\" />\r\n                                    </b>\r\n                                </div>\r\n                                <div className=\"subs-title\">\r\n                                    <FormattedMessage id=\"home-header.searchdoctor\" />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"child-content\">\r\n                                <div>\r\n                                    <b>\r\n                                        <FormattedMessage id=\"home-header.health-facility\" />\r\n                                    </b>\r\n                                </div>\r\n                                <div className=\"subs-title\">\r\n                                    <FormattedMessage id=\"home-header.select-room\" />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"child-content\">\r\n                                <div>\r\n                                    <b>\r\n                                        <FormattedMessage id=\"home-header.doctor\" />\r\n                                    </b>\r\n                                </div>\r\n                                <div className=\"subs-title\">\r\n                                    <FormattedMessage id=\"home-header.select-doctor\" />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"child-content\">\r\n                                <div>\r\n                                    <b>\r\n                                        <FormattedMessage id=\"home-header.fee\" />\r\n                                    </b>\r\n                                </div>\r\n                                <div className=\"subs-title\">\r\n                                    <FormattedMessage id=\"home-header.check-health\" />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"right-content\">\r\n                            <div className=\"support\">\r\n                                <i className=\"fas fa-question-circle\"></i>\r\n                                <FormattedMessage id=\"home-header.support\" />\r\n                            </div>\r\n                            <div\r\n                                className={\r\n                                    language === LANGUAGES.VI ? 'language-vi active' : 'language-vi'\r\n                                }\r\n                            >\r\n                                <span onClick={() => this.handleChangeLanguage(LANGUAGES.VI)}>\r\n                                    VI\r\n                                </span>\r\n                            </div>\r\n                            <div\r\n                                className={\r\n                                    language === LANGUAGES.EN ? 'language-en active' : 'language-en'\r\n                                }\r\n                            >\r\n                                <span onClick={() => this.handleChangeLanguage(LANGUAGES.EN)}>\r\n                                    En\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {this.props.isShowBanner === true && (\r\n                    <div className=\"home-header-banner\">\r\n                        <div className=\"content-up\">\r\n                            <div className=\"title1\">\r\n                                <FormattedMessage id=\"banner.title1\" />\r\n                            </div>\r\n                            <div className=\"title2\">\r\n                                <FormattedMessage id=\"banner.title2\" />\r\n                            </div>\r\n                            <div className=\"search\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                                <input type=\"text\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"content-down\">\r\n                            <div className=\"option\">\r\n                                <div className=\"option-child\">\r\n                                    <div className=\"icon-child\">\r\n                                        <i className=\"fas fa-hospital\"></i>\r\n                                    </div>\r\n                                    <div className=\"text-child\">\r\n                                        <FormattedMessage id=\"banner.child1\" />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"option-child\">\r\n                                    <div className=\"icon-child\">\r\n                                        <i className=\"fas fa-hospital\"></i>\r\n                                    </div>\r\n                                    <div className=\"text-child\">\r\n                                        <FormattedMessage id=\"banner.child2\" />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"option-child\">\r\n                                    <div className=\"icon-child\">\r\n                                        <i className=\"fas fa-hospital\"></i>\r\n                                    </div>\r\n                                    <div className=\"text-child\">\r\n                                        <FormattedMessage id=\"banner.child3\" />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"option-child\">\r\n                                    <div className=\"icon-child\">\r\n                                        <i className=\"fas fa-hospital\"></i>\r\n                                    </div>\r\n                                    <div className=\"text-child\">\r\n                                        <FormattedMessage id=\"banner.child4\" />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"option-child\">\r\n                                    <div className=\"icon-child\">\r\n                                        <i className=\"fas fa-hospital\"></i>\r\n                                    </div>\r\n                                    <div className=\"text-child\">\r\n                                        <FormattedMessage id=\"banner.child5\" />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"option-child\">\r\n                                    <div className=\"icon-child\">\r\n                                        <i className=\"fas fa-hospital\"></i>\r\n                                    </div>\r\n                                    <div className=\"text-child\">\r\n                                        <FormattedMessage id=\"banner.child6\" />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        userInfo: state.user.userInfo,\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeLanguageAppRedux: (language) => dispatch(changeLanguageApp(language)),\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(HomeHeader));\r\n","import React, { Component } from 'react';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\nimport './CustomScrollbars.scss';\r\n\r\nclass CustomScrollbars extends Component {\r\n\r\n    ref = React.createRef();\r\n\r\n    getScrollLeft =()=>{\r\n        const scrollbars = this.ref.current;\r\n        return scrollbars.getScrollLeft();\r\n    }\r\n    getScrollTop =()=>{\r\n        const scrollbars = this.ref.current;\r\n        return scrollbars.getScrollTop();\r\n    }\r\n\r\n    scrollToBottom = () => {\r\n        if (!this.ref || !this.ref.current) {\r\n            return;\r\n        }\r\n        const scrollbars = this.ref.current;\r\n        const targetScrollTop = scrollbars.getScrollHeight();\r\n        this.scrollTo(targetScrollTop);\r\n    };\r\n\r\n    scrollTo = (targetTop) => {\r\n        const { quickScroll } = this.props;\r\n        if (!this.ref || !this.ref.current) {\r\n            return;\r\n        }\r\n        const scrollbars = this.ref.current;\r\n        const originalTop = scrollbars.getScrollTop();\r\n        let iteration = 0;\r\n\r\n        const scroll = () => {\r\n            iteration++;\r\n            if (iteration > 30) {\r\n                return;\r\n            }\r\n            scrollbars.scrollTop(originalTop + (targetTop - originalTop) / 30 * iteration);\r\n\r\n            if (quickScroll && quickScroll === true) {\r\n                scroll();\r\n            } else {\r\n                setTimeout(() => {\r\n                    scroll();\r\n                }, 20);\r\n            }\r\n        };\r\n\r\n        scroll();\r\n    };\r\n\r\n    renderTrackHorizontal = (props) => {\r\n        return (\r\n            <div {...props} className=\"track-horizontal\" />\r\n        );\r\n    };\r\n\r\n    renderTrackVertical = (props) => {\r\n        return (\r\n            <div {...props} className=\"track-vertical\" />\r\n        );\r\n    };\r\n\r\n    renderThumbHorizontal = (props) => {\r\n        return (\r\n            <div {...props} className=\"thumb-horizontal\" />\r\n        );\r\n    };\r\n\r\n    renderThumbVertical = (props) => {\r\n        return (\r\n            <div {...props} className=\"thumb-vertical\" />\r\n        );\r\n    };\r\n\r\n    renderNone = (props) => {\r\n        return (\r\n            <div />\r\n        );\r\n    };\r\n\r\n    render() {\r\n        const { className, disableVerticalScroll, disableHorizontalScroll, children,...otherProps } = this.props;\r\n        return (\r\n            <Scrollbars\r\n                ref={this.ref}\r\n                autoHide={true}\r\n                autoHideTimeout={200}\r\n                hideTracksWhenNotNeeded={true}\r\n                className={className ? className + ' custom-scrollbar' : 'custom-scrollbar'}\r\n                {...otherProps}\r\n                renderTrackHorizontal={disableHorizontalScroll ? this.renderNone : this.renderTrackHorizontal}\r\n                renderTrackVertical={disableVerticalScroll ? this.renderNone : this.renderTrackVertical}\r\n                renderThumbHorizontal={disableHorizontalScroll ? this.renderNone : this.renderThumbHorizontal}\r\n                renderThumbVertical={disableVerticalScroll ? this.renderNone : this.renderThumbVertical}\r\n            >\r\n                {children}\r\n            </Scrollbars>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CustomScrollbars;"],"sourceRoot":""}